<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>¿Cuál es el ritmo de la pandemia?</title>
    <url>/covid/el_ritmo_de_la_pandemia/</url>
    <content><![CDATA[


<style>


    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }
    
    .axis--y .tick text{
        text-anchor: start;
    }

    .axis-title {
        fill: #222;
        font-size: 14px;
        text-anchor: start;
    }
    
    .line, .aspo {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 1px;
    }

    path.aspo {
        stroke:#222;
        stroke-dasharray: 3px 1px;   
    }

    rect.aspo {
        stroke:none;
        fill:rgba(184, 184, 184, 0.226)
    }

    .aspoTexto{
        text-anchor: start;
        font-size: 14px;
        font-weight: 600;
        fill: #222;
    }

    .tendencia{
        fill: none;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    .duplicacionesTextos{
        text-anchor: end;
        font-size: 14px;
        font-weight: 600;
    }



    #avisoDuplicacion {
        position: absolute;
        top: 38%;
        right: 5%;
        width: 34%;
        background-color: #ffd1d3;
        line-height: 21px;
        font-size: 15px;
        padding: 8px 10px;
        border-radius: 5px;
        color: rgb(240, 78, 83);
        font-weight: bold;
        text-align: right;
    }
     
    .res1{
        fill: #8b6baf46;
        background: #8b6baf;
    }

    .res0{
        fill: #62BB4646;
        background: #62BB46;
    }

    .label.etapa1{
        background: #F26522;
    }
    .label.etapa2{
        background: #62BB46;
    }
    .label.etapa3{
        background: #00468B;
    }


    @media only screen and (min-width: 768px) {
        #avisoDuplicacion {
            top: 28%;
            right: 5%;
            width: 24%;
        }
    }
    
</style>


<section id='scrolly'>
    <div class='scrolly'>
        

        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="contenedorGrafico" class='sticky' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p> Vemos gráficos, números e información sobre la pandemia todo el tiempo. Pero ¿qué debemos mirar en los datos para saber en qué situación estamos?  
                    <br/><br/>
                    Una de las respuestas está en mirar el "ritmo" al cual se desarrolla el contagio (en vez de mirar cifras aisladas como el número absoluto de casos). ¿Qué es y cómo se ve el ritmo de contagio en una pandemia?
                    <br/><br/>                    
                    Para responder, tenemos que mirar el detrás de escena de este gráfico.
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    El detrás de escena comienza con este gráfico, que encontramos habitualmente en las noticias.
                    <br/><br/>
                    Se ve claramente una cosa, pero no mucho más: que la cantidad de casos confirmados es cada vez más y más grande. Y esto es porque la curva crece de forma "aproximadamente exponencial”, como se oye por ahí.
                    <br/><br/>
                    Esto no nos dice mucho sobre la pandemia salvo que se está expandiendo, algo que ya sabíamos.

Sin embargo, hay más en este gráfico, mucho más, sólo que hay que hacerle un cambio…

                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Para que estos datos muestren su verdadera naturaleza tenemos que hacer un zoom combinado en el eje vertical:
                    <mark class="label res1">comprimir la parte de números grandes</mark>
                     y 
                     <mark class="label res0">ampliar la parte de números chicos.</mark>                     
                </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    Aclaramos antes de que sospeches: no estamos modificando los datos, sólo estamos cambiando astutamente la escala del eje vertical del gráfico. ¿Para qué?
                    <br/><br/>
                    Para que eso que parecía una curva empinadísima ahora nos revele otras cosas.
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                En este tipo de escala, llamada “semi-log” por los expertos, vemos mucho más que antes.
                <br/><br/>
                Por ejemplo, se ve que la evolución está formada por partes aproximadamente rectas. Y se ve un gran cambio en la inclinación después de los 
                <mark class="label etapa1">primeros 20 días </mark>
                de la pandemia,
                a diferencia de lo que sucede en los 
                <mark class="label etapa2">30 días siguientes </mark>
                o entre los 
                <mark class="label etapa3">días 80 y 120 </mark>
                desde el primer caso.
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    La <b>inclinación</b> de cada parte recta nos dice cuál es el <b>ritmo</b> de la pandemia. Ese ritmo se mide por la cantidad de días que el número total de casos tarda en duplicarse. Por ejemplo, al comienzo pasamos de 10 a 20 casos en tres días. Y en los siguientes tres días ya teníamos 40 casos.
                    <br/><br/>
                    <img src="/images/ritmo.png">
                    
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Vemos que al comienzo, el tiempo de duplicación era de aproximadamente 3 días. Luego del primer mes, el ritmo disminuyó mucho y el tiempo de duplicación pasó a 20 días.
                    <br/><br/>
                    Mostrar los datos así nos permite asociar esa gran disminución del ritmo al efecto de medidas drásticas como el aislamiento social (que tardan unos 15 días en reflejarse en el número de casos confirmados).
                </p>
            </div>

        </article>


    </div>

</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/E1_ritmoBis.csv"),
    d3.csv("https://datos.decodificar.org/E1_ritmo.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {
 
    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="E1");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
       

    // **** CODIGO DEL SCROLLY *******


    const container = d3.select('#scrolly'); //busco el container total
    const stepSel = container.selectAll('.step'); // selecciono los "steps"

    function updateChart(index) {  // funcion que llama cada vez que cruza un humbral
        const sel = container.select(`[data-index='${index}']`);
        stepSel.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init() { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: stepSel.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index);
            }
        });
    }
 

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, tituloY;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var svg = d3.select("#contenedorGrafico").append("svg"),
    marginTexto = isMobile ? 30:45,
    margin = isMobile ? {top: 35, right: 20, bottom: 15, left: 20} : {top: 50, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#contenedorGrafico').style('width').slice(0, -2),
    height = +d3.select('#contenedorGrafico').style('height').slice(0, -2)-25;

d3.select("#contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);


    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

var parseTime = d3.timeParse("%Y-%m-%d");

var x = d3.scaleTime().range([0, width]);
var y = d3.scaleLinear().range([height, 0]);
var yLog = d3.scaleLog().range([height, 0]);

var yAxis = d3.axisLeft(y);
    yAxis.ticks(8).tickFormat(d3.format(",d")).tickSizeInner(-6)
;

var yLogAxis = d3.axisLeft(yLog);
    yLogAxis.ticks(5).tickFormat(d3.format(",d")).tickSizeInner(-6);

var line = d3.line()
    .x(function(d) { return x(d.fecha); })
    .y(function(d) { return yLog(d.casos_tot); });

var grafico = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    ;


    var tituloGrafico = 
        ["Número total de casos confirmados en Argentina (escala lineal)",
        "Número total de casos confirmados en Argentina (escala logarítmica)"];
        tituloGrafico = isMobile?
        ["Total de casos confirmados (escala lineal)",
        "Total de casos confirmados (escala logarítmica)"]
        : tituloGrafico;
    
    var data = files[0] // datos principales;

    var duplicaciones = files[1] // funciones de duplicacion de casos;

    data.forEach(function(d) {
      d.fecha = parseTime(d.fecha);
      d.casos_tot = +d.casos_tot;
    });

    duplicaciones.forEach(function(d,i) {
      d.desdeX = parseTime(d.desdeX);
      d.hastaX = parseTime(d.hastaX);
      d.desdeY = +d.desdeY;
      d.hastaY = +d.hastaY;
      d.index = i;
    });

    x.domain([parseTime("2020-03-01"),d3.max(data, function(d) { return d.fecha; })]);
    y.domain([d3.min(data, function(d) { return d.casos_tot; }), d3.max(data, function(d) { return d.casos_tot; })+10000]);
    yLog.domain([d3.min(data, function(d) { return d.casos_tot; }), d3.max(data, function(d) { return d.casos_tot; })+300000]);


     grafico.append("g") // EJE X
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
        .ticks(d3.timeMonth.every(1)))
        .call(ajustaMesesEjeX)
        ;

    ejeY = grafico.append("g") // EJE Y
        .attr("class", "axis axis--y")
       .call(yLogAxis)
       ;
    
    tituloY = ejeY.append("text")
        .attr("class", "axis-title")
        .attr("y", -8)
        .text(tituloGrafico[1]);


        
    grafico.append("path") // LINEA DE FONDO
        .datum(data)
        .attr("class", "line")
        .attr("d", line);

    grafico.append("g") // CIRCULITOS DE DATOS
      .attr("fill", "#00468B")
      .attr("stroke", "none")
    .selectAll("circle")
    .data(data)
    .join("circle")
      .attr("class","dataCircle")
      .attr("cx", i => x(i.fecha))
      .attr("cy", i => yLog(i.casos_tot))
      .attr("r", 3);


    grafico.selectAll("rect")
                    .data([[1,10000],[10000,y.domain()[1]]])
                    .join("rect")
                        .attr("class", (d,i)=>"resaltados "+"res"+i)
                        .attr("x", -5)
                        .attr("y", d=>yLog(d[1]))
                        .attr("width", width+5)
                        .attr("height", d=>yLog(d[0])-yLog(d[1]))
                        .style("opacity",0) ;

    
    

    var tendencias = grafico.append("g"); // DUPLICACIONES

    tendencias.selectAll("path")
     .data(duplicaciones)
     .join("path")
        .attr("class", "tendencia")
        .style("opacity", d=> { return d.index==0 ? 100 : 0})
        .attr('d', d => d3.line()([[x(d.desdeX), yLog(d.desdeY)],[x(d.hastaX), yLog(d.hastaY)]]))
        .style("stroke", d => colores(d.index+1));

    tendencias.selectAll("text")
     .data(duplicaciones)
     .join("text")
        .attr("class", d=>{return "duplicacionesTextos"+" duplica"+d.index})
        .style("opacity", d=> { return d.index==0 ? 100 : 0})
        .attr('x', d => Math.abs(x(d.hastaX) - x(d.desdeX))/2+ x(d.desdeX))
        .attr('y', d => yLog(d.desdeY) - 10 - Math.abs(yLog(d.hastaY) - yLog(d.desdeY) )/2)
        .style("fill", d => colores(d.index+1))
        .text(d=> { return d.duplicacion + " días"});


     /* d3.select("#contenedorGrafico").append("div")
            .attr("id","avisoDuplicacion")
            .html("Tiempo de duplicación última semana:<br/>"+ duplicaciones[0].duplicacion+" días")
 */

    var aspo = grafico.append("g").attr("id","aspo")
                .style("opacity",0)
    ;// ASPO
            
    aspo.append("path")
                .attr("class", "aspo")
                .attr('d', d3.line()([[x(parseTime("2020-03-21")), 0],[x(parseTime("2020-03-21")),height]])) ; 

    /* aspo.append("rect")
                .attr("class", "aspo")
                .attr("x", x(parseTime("2020-03-21")))
                .attr("y", 0)
                .attr("width", x(parseTime("2020-04-25")-x(parseTime("2020-03-21"))))
                .attr("height", height) ; */
                  

    var aspoText = aspo.append("text")
                .attr("class", "aspoTexto")
                .attr('y', height*0.8);

    aspoText.selectAll("tspan")
            .data(["Aislamiento Social,","Preventivo y","Obligatorio"])
            .join("tspan")
            .text(d => d)
            .attr("x", x(parseTime("2020-03-21"))+8)
            .attr("dy", 16);

    
                init()

    function scrollyTelling(step){

        var cambia = {};
        switch (step) {
            case 0: // INICIO, ES LOG
                cambia.tipo = "log";
                cambia.tick = -6;
                d3.selectAll(".tendencia").filter(d=>d.index==0).transition().delay(300).duration(300).style("opacity",1);
                d3.selectAll(".duplicacionesTextos").filter(d=>d.index==0).transition().delay(300).duration(300).style("opacity",1);
                d3.select("#avisoDuplicacion").transition().duration(300).style("opacity",1);
                cambia.resalta = 0;
            break;

            case 1: // PASA A LINEAL
                d3.selectAll(".tendencia").filter(d=>d.index==0).transition().duration(300).style("opacity",0);
                d3.selectAll(".duplicacionesTextos").filter(d=>d.index==0).transition().duration(300).style("opacity",0);
                d3.select("#avisoDuplicacion").transition().duration(300).style("opacity",0);
                cambia.tipo = "lineal"
                cambia.tick =-6
                cambia.resalta = 0;
                break;

            case 2: // AGREGA FLECHAS/GRADIENTE
                cambia.tipo = "lineal"
                cambia.tick =-width
                cambia.resalta = 1;
            break;

            case 3: // VUELVE A LOG CON FLECHAS/GRADIENTE
                cambia.tipo = "log"
                cambia.tick =-width;
                cambia.resalta = 1;
                d3.selectAll(".tendencia").transition().duration(600).style("opacity",0)
            break;

            case 4: // AGREGA TENDENCIAS
                cambia.tipo = 0
                cambia.tick =-6
                cambia.resalta= 0;
                d3.selectAll(".resaltados").transition().duration(600).style("opacity", 0);
                d3.selectAll(".tendencia").transition().delay(d=>d.index*100).duration(1100).style("opacity",1)
                d3.selectAll(".duplicacionesTextos").transition().duration(600).style("opacity",0)

            break;

            case 5: // AGREGA NUMEROS A tENDECNIAS
                cambia.tipo = 0
                cambia.resalta = 0;
                d3.selectAll(".duplicacionesTextos").transition().delay(d=>d.index*100).duration(1100).style("opacity",1)
                d3.select("#aspo").transition().duration(600).style("opacity",0)
            break;

            case 6: // AGREGA ASPO
                cambia.tipo = 0
                cambia.resalta = 0;
                d3.select("#aspo").transition().duration(600).style("opacity",1)
            break;

        }

        if(cambia.tipo == "log"){
            if(cambia.tick!=0) yLogAxis.tickSizeInner(cambia.tick);
            
            ejeY.transition().duration(600).call(yLogAxis);

            tituloY.text(tituloGrafico[1]);

            line.y(function(d) { return yLog(d.casos_tot); });
            d3.selectAll(".line")
                .transition().duration(600)
                .attr("d", line);

            d3.selectAll(".dataCircle")
                .transition().duration(600)
                .attr("cy", function(d) { return yLog(d.casos_tot); });

            d3.selectAll(".resaltados")
                .transition().duration(600)
                        .attr("y", d=>yLog(d[1]))
                        .attr("height", d=>yLog(d[0])-yLog(d[1]))
                        .style("opacity", cambia.resalta) ;
            
        }else if (cambia.tipo == "lineal"){
            if(cambia.tick!=0) yAxis.tickSizeInner(cambia.tick);
            ejeY.transition().duration(600).call(yAxis);

            tituloY.text(tituloGrafico[0])

            line.y(function(d) { return y(d.casos_tot); });
            d3.selectAll(".line")
                .transition().duration(600)
                .attr("d", line);

            d3.selectAll(".dataCircle")
                .transition().duration(600)
                .attr("cy", function(d) { return y(d.casos_tot); })

                d3.selectAll(".resaltados")
                .transition().duration(600)
                        .attr("y", d=>y(d[1]))
                        .attr("height", d=>y(d[0])-y(d[1]))
                        .style("opacity", cambia.resalta)
                         ;

        }
            

    }



//********** funciones
function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
        console.log(x.domain()[0],d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


//*****

});

</script>



<div class="note info"><p>Para evaluar la situación conviene, entonces, mirar la inclinación de la curva (¡en escala semi-log!): menor inclinación significa menor ritmo de contagio, es decir situación más controlada.</p>
<p>En resumen, el ritmo de la curva es uno de los termómetros que tenemos para evaluar la situación actual, y nos da mayor información que la cifra aislada del número total de casos.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿Cuántos contagiados hay realmente?</title>
    <url>/covid/la_cantidad_de_contagiados/</url>
    <content><![CDATA[



<style>


    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }
    
    .axis--y .tick text{
        text-anchor: start;
	}
	
	text.nombreProvincias{
		font-size: 11px;
	}


    .axis-title {
      fill: #222;
        font-size: 16px;
        text-anchor: start;
    }
    
    .line {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 1px;
    }
    .linePais {
      fill: none;
      stroke: #00468B;
      stroke-width: 2px;
	}
	
	
    .tendencia{
        fill: none;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    .duplicacionesTextos{
        text-anchor: end;
        font-size: 14px;
        font-weight: 600;
	}
	
	span.pcias{
		display: block;
		margin-top: 11px;
	}
  
	#contenedorGrafico.sticky{
			margin-bottom: 191px;
        }
        
    .label.desconocido{
        background: #8B6BAF45;
        color:rgb(58, 58, 58) !important;
        font-weight: 400 !important;
    }
     
    
    .label.naranja{
        background: #F26522;

    }

    .label.celeste{
        background: #5badd4;

    }

    .label.violeta{
        background: #8B6BAF;

    }
     
    
/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
     
    @media only screen and (min-width: 768px) {
      
    }
    
</style>


<section id='scrolly1'>
    <div class='scrolly'>
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico1" class='sticky contenedorGrafico' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
				<p>Este es otro de los gráficos que posiblemente más veces hayas visto desde que empezó el aislamiento social: el número de nuevos casos que detectamos cada día.
                    <br/><br/>
                    Ahora bien, ¿ese número refleja la cantidad real de personas con COVID-19?<br />
                    La respuesta es...                    
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    ...no. <mark class="label desconocido">No conocemos el número real</mark> de personas con COVID-19.
                     Y cuando decimos que no lo conocemos queremos decir <b>que nadie en el mundo</b> lo conoce.
				</p>
		    </div>
        </article>
		
	</div>

	

</section>

<section id='scrolly2'>
    <div class='scrolly'>
 
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico2" class='sticky contenedorGrafico' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    Para saber quién tiene coronavirus hacemos un test. Y ese test no se lo hacemos a todo el mundo.
                    <br/><br/>
					Testear a TODA la población de la Argentina es muy difícil y costoso. Encima, una persona podría contagiarse después de ser testeada así que habría que testearla periódicamente, por ejemplo, una vez por semana. Una tarea (casi) imposible. ¡Más de 40 millones de tests semanales!
                    <br/><br/>
					Entonces hay que DECIDIR a quiénes se testea.
                </p>
            </div>
            <div class='step' data-index='1'>
                <p>
					Acá entra la <a href="https://www.argentina.gob.ar/salud/coronavirus-COVID-19/definicion-de-caso" target="_blank">definición de caso sospechoso</a>: a quiénes decidimos testear.
                    <br/><br/>
                Lo más común es que se testee a <mark class="label naranja">personas con ciertos síntomas relevantes</mark> (fiebre, tos, pérdida del olfato, etc.) o <mark class="label naranja">que estén en riesgo claro de contagio</mark> (viaje al exterior, contactos estrechos con casos positivos, personal de salud, etc.).
                <br/><br/>
                    Además, como muchas personas con COVID-19 tienen algunos  síntomas pero no suficientes para ser testeadas (según la definición de caso sospechoso en ese momento), habrá algunas personas que nunca testearemos.
                    </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    De las personas que testeamos por ser casos sospechosos, <mark class="label violeta">algunas son casos confirmados</mark> de COVID-19.
                    <br/><br/>
                    Y muchas otras de esas personas dan negativo al test.
                    <br/><br/>
                    Pero ¿solo las personas que dan positivo al test son las que tienen COVID-19?
				</p>
            </div>
			<div class='step' data-index='3'>
                <p>
					La respuesta también es no. Hay muchas personas que tienen COVID-19 pero no tienen síntomas: los famosos <mark class="label celeste">casos asintomáticos.</mark>
                    <br/><br/>
					Como no cumplen con la definición de caso sospechoso, estas personas no son testeadas y por lo tanto no forman parte del número de casos diarios confirmados, aunque realmente tengan o hayan tenido COVID-19.
                    <br/><br/>
					Por eso ¡no aparecen en ningún gráfico de casos confirmados! Los únicos que aparecen son los casos de personas que fueron testeadas y dieron positivo.
				</p>

			</div>
			
			<div class='step' data-index='4'>
                <p>
                    Además, las decisiones de a quién testear pueden cambiar a medida que la situación progresa.
                    <br/><br/>
                    Por ejemplo, en el inicio de la pandemia una persona que había perdido el olfato y tenía tos no era testeada. Pero, después del 8 de junio, sí.
                    <br/><br/>
                    Esta persona no aparecía en nuestro universo de casos sospechosos y <mark class="label naranja">ahora sí.</mark>
				</p>
			</div>
			
        </article>
    </div>

</section>


 <!-- Scripts -->
 <script>
	
	//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/E3_contagiados_total.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {
   
    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="E3");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
     


    // **** CODIGO DEL SCROLLY *******


    const container1 = d3.select('#scrolly1'); //busco el container total
	const container2 = d3.select('#scrolly2'); //busco el container total

    const stepSel1 = container1.selectAll('.step'); // selecciono los "steps"
	const stepSel2 = container2.selectAll('.step'); // selecciono los "steps"

    function updateChart(index, what,containerNumber) {  // funcion que llama cada vez que cruza un humbral
        const sel = d3.select('#scrolly'+containerNumber).select(`[data-index='${index}']`);
        what.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(containerNumber,index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init(what,containerNumber) { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: what.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index,what,containerNumber);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index,what,containerNumber);
            }
        });
    }
  

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, ejeX, tituloY, minDate, maxDate;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var svg = d3.selectAll(".contenedorGrafico").append("svg"),
    margin = isMobile ? {top: 35, right: 20, bottom: 15, left: 20} : {top: 50, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#grafico1').style('width').slice(0, -2),
    height = +d3.select('#grafico1').style('height').slice(0, -2)-25;


d3.select(".contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);

    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

     var signodepregunta = "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

	var parseTime = d3.timeParse("%Y-%m-%d");

///******** MANEJO DE DATOS ********
	var data = files[0] // datos principales;

		data.forEach(element => {
			element.fecha = parseTime(element.fecha);
			element.casos_diarios = +element.casos_diarios;
			element.casosFake = Math.round(element.casos_diarios*(Math.random()+1));
		});

		data.columns.push("casosFake")
		
   var series = d3.stack()
			.keys(data.columns.slice(1))(data)
			.map(d => (d.forEach(v => v.key = d.key), d))

//***************

	minDate = parseTime("2020-03-01"); //fecha de inicio el primero de marzo para que aparezca marzo!
	maxDate = d3.max(data, d => d.fecha);


	var x = d3.scaleTime()
			.range([0, width])
			.domain([minDate,maxDate]);

	var y = d3.scaleLinear()
			.range([height, 0])
			.domain([0,d3.max(data,d=>d.casos_diarios)]);
	
	

	var yAxis = d3.axisLeft(y);
		yAxis.ticks(4).tickFormat(d3.format(",d")).tickSizeInner(-6);


	svg.append("g")
    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	;

	svg.each(function(d,i){
		d3.select(this).select("g").attr("id","gInterno"+i);
	})

 


	var gBarras = d3.select("#gInterno0");
	var gBubbles = d3.select("#gInterno1");

    ejeX = gBarras.append("g") // EJE X
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
        	.ticks(d3.timeMonth.every(1)))
        .call(ajustaMesesEjeX)
        ;

    ejeY = gBarras.append("g") // EJE Y
        .attr("class", "axis axis--y")
	   	.call(yAxis)
	        ;
    
    tituloY = ejeY.append("text")
        .attr("class", "axis-title")
        .attr("y", -8)
        .text("Casos diarios confirmados");


	
		gBarras.append("g")
			.selectAll("g")
			.data(series)
			.join("g")
			.attr("id", d => d[0].key)
			.attr("fill", (d,i) => !i?"#8B6BAF":"#8B6BAF77")
			.attr("opacity", (d,i) => !i?1:0)
			.selectAll("rect")
			.data(d => d)
			.join("rect")
			.attr("class","barrasGrafico")
			.attr("x", (d, i) => x(d.data.fecha))
			.attr("y", d => y(d[1]))
			.attr("height", d => y(d[0]) - y(d[1]))
			.attr("width",  (x(parseTime("2020-03-02"))-1)>1?(x(parseTime("2020-03-02"))-1):1)

        ;
        
        var pregunta = gBarras.append("g").attr("id","signodepregunta").style("opacity",0)
                        .attr("transform","translate("+width*0.8+","+height*0.2+")")
                        .append("path")
                        .attr("d", signodepregunta)
                        .style("fill","#8B6BAF77")
                        .attr("transform","scale(0.08)")
                        ;




         var posiciones = [
            [isMobile?width/2:width/4, height/2], // posición inicial
            [isMobile?width/2:width/4, height*3/4], // posición nueva arriba
            [isMobile?width/2:width/4, height/4] // posición nueva abajo
        ]


		const 	n=100,
				nodes = d3.range(n).map((d,i) => {
                    var pos = [posiciones[0],
                            i<n*0.3?posiciones[1]:posiciones[2],
                            i<n*0.15?posiciones[1]:posiciones[2],
                            ];
                    var color = ["#62BB46",
                            i<n*0.3?"#F26522":"#62BB46",
                            i<n*0.15?"#8B6BAF":"#62BB46",
                            i<n*0.15?"#8B6BAF":i>n*0.8?"#5badd4":"#62BB46",
                            i<n*0.15?"#8B6BAF":i<n*0.25?"#F26522":i>n*0.8?"#5badd4":"#62BB46",
                            ];
                    return {"pos":pos, "color":color}}),
				radius = 5;;


        function simulaNodos(nodes){
            for (let i = 0; i < 3; i++) {
                var simulation = d3.forceSimulation(nodes)
                    .force("x", d3.forceX(d=>d.pos[i][0]))
                    .force("y", d3.forceY(d=>d.pos[i][1]))
                    .force("collide", d3.forceCollide(d=> (radius + 1.5 + (Math.random()*3))))
                    .stop();

                for (let i = 0; i < 200; ++i) simulation.tick();
                nodes.map(dd=> dd.pos[i]=[dd.x,dd.y]);                
            }    

        }

       simulaNodos(nodes)
		

		gBubbles.selectAll("circle")
			.data(nodes)
			.join("circle")
			.attr("class","personitas")
			.style("fill","#62BB46")
			.attr("cy",d=>d.pos[0][1])
			.attr("cx",d=>d.pos[0][0])
			.attr("r",radius)
			;

var variaRandom;
    

    init(stepSel1,1)
	init(stepSel2,2)

function scrollyTelling(containerNumber,step){


	if(containerNumber == 1){  //GRAFICO PRIMER SCROLLY
		switch (step) {
			case 0:
                y.domain([0,d3.max(data,d=>d.casos_diarios)]);
                d3.select("#signodepregunta").transition().duration(300).style("opacity",0)
                clearInterval(variaRandom)
			break;

			case 1:
				y.domain([0,d3.max(data,d=>(d.casos_diarios+d.casosFake))]);
                setTimeout(function(){
                    variaRandom = setInterval(function() {
                        d3.select("#casosFake").selectAll(".barrasGrafico").each(function (p) {
                            var rand = 1+Math.random()/10;
                            d3.select(this).transition().ease(d3.easeSinInOut).duration(300)
                                .attr("y", d =>y(d[1]*rand))
                                .attr("height", d => y(d[0]) - y(d[1]*rand));
                        });
                    }, 305);
                }, 300);
                d3.select("#signodepregunta").transition().delay(300).duration(300).style("opacity",1)

            break;
	    }
			ejeY.transition().duration(600).call(yAxis);
			d3.selectAll("#casosFake").transition().duration(600).style("opacity",step);
			d3.selectAll(".barrasGrafico").transition().duration(600)
						.attr("y", d => y(d[1]))
                        .attr("height", d => y(d[0]) - y(d[1]));
  
  
	}else{

        clearInterval(variaRandom);

            switch (step) { //GRAFICO SEGUNDO SCROLLY
                case 0: // todos verdes
                    d3.selectAll(".personitas")
                        .transition().duration(600)
                        .delay(e=>e.index)
                        .style("fill",d=>d.color[0])
                        .attr("cx", d=>d.pos[0][0])
                        .attr("cy", d=>d.pos[0][1]);
                break;

                case 1: //separo los sospechosos
                d3.selectAll(".personitas")
                        .transition().duration(600)
                        .delay(e=>e.index)
                        .style("fill",d=>d.color[1])
                        .attr("cx", d=>d.pos[1][0])
                        .attr("cy", d=>d.pos[1][1]);
                break;

                case 2:
                d3.selectAll(".personitas")
                        .transition().duration(600)
                        .delay(e=>e.index)
                        .style("fill",d=>d.color[2])
                        .attr("cx", d=>d.pos[2][0])
                        .attr("cy", d=>d.pos[2][1]);
                    
                break;

                case 3:
                d3.selectAll(".personitas")
                        .transition().duration(600)
                        .delay(e=>e.index)
                        .style("fill",d=>d.color[3])
                break;

                case 4:
                d3.selectAll(".personitas")
                        .transition().duration(600)
                        .delay(e=>e.index)
                        .style("fill",d=>d.color[4])
                break;
            }


            function actualizaPersonitas(paso,delay,color){
                    d3.selectAll(".personitas")
                        .transition().delay(delay).duration(600)
                        .delay(e=>302+e.index)
                        .style("fill",color)
                        .attr("cx", d=>d.pos[paso][0])
                        .attr("cy", d=>d.pos[paso][1]);
                    
                }
                    
    }
          

}



//********** funciones
 
function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
        console.log(x.domain()[0],d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


});

</script>


<div class="note info"><p>Así, vemos que siempre que miramos datos hay que preguntarse cómo fueron tomados.</p>
<p>Las decisiones de testeo dependen de muchas cosas: lo que sabemos de la enfermedad, los recursos que tenemos y cómo decidimos administrarlos. Si tenemos en cuenta estas cosas, deberíamos comparar solo entre los días donde se testeaba con el mismo criterio.</p>
<p>Además, sabemos que el número real de personas con COVID-19 es probablemente mucho mayor que el número registrado de casos confirmados. Aun así, conocer el número de confirmados y su ritmo de crecimiento nos permite tomar mejores decisiones para frenar la pandemia.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿Cómo evoluciona mi provincia?</title>
    <url>/covid/evolucion_por_provincia/</url>
    <content><![CDATA[


<style>


    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }
    
    .axis--y .tick text{
        text-anchor: start;
	}
	
	text.nombreProvincias{
		font-size: 10px;
	}


    .axis-title {
      fill: #222;
        font-size: 16px;
        text-anchor: start;
    }
    
    .line {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 1px;
    }
    .linePais {
      fill: none;
      stroke: #00468B;
      stroke-width: 2px;
	}
	
	
    .tendencia{
        fill: none;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    .duplicacionesTextos{
        text-anchor: end;
        font-size: 14px;
        font-weight: 600;
	}
	
	span.pcias{
		display: block;
		margin-top: 11px;
		font-size: smaller;
	}

    .pcias{
		background: #ffc20e21;
		padding: 3px 7px;
		line-height: 1.6em;
		border-radius: 5px;
	}
	 
    @media only screen and (min-width: 768px) {
      
    }
    
</style>


<section id='scrolly'>
    <div class='scrolly'>
<!--         <div class='stepFijo'>
        </div>
 -->
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="contenedorGrafico" class='sticky' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
				<p> Las medidas para evitar el movimiento de personas entre distritos o provincias nos permiten "desarmar" el problema grande en partes más chicas, con la esperanza de que así sea más fácil enfrentarlo.
					<br/><br/>
                    Veamos, ¿cómo va cada provincia? La respuesta está en este gráfico, pero hay que mirarlo por partes.
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    Esta es la curva de todos los casos confirmados de COVID-19 en Argentina.
					<br/><br/>
					Si ya viste <a href="/covid/el_ritmo_de_la_pandemia/">esta otra historia</a>, sabés que para saber cómo está avanzando la pandemia lo importante es el ritmo. En el gráfico, el ritmo se ve en la inclinación de la curva:
					<br/><br/>
					<img src="/images/ritmo.png">
					<br/><br/>
					Ahora bien, la curva de la Argentina tiene un ritmo como país. Pero eso no quiere decir que todas las provincias estén igual.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Dentro de la curva de Argentina están los datos de cada provincia, y podemos comparar la inclinación de cada una por separado.
					<br/><br/>

						¡No es igual para todas!

                </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    Para saber cómo va el ritmo de cada provincia, tenemos que mirar la inclinación de las partes <a href="/covid/el_ritmo_de_la_pandemia/"> rectas de cada curva</a>, por ejemplo en los últimos días.
					<br/><br/>
					Esa inclinación nos da el tiempo de duplicación de casos, que no es el mismo en todos los lugares.
					<br/><br/>
					El tiempo de duplicación es un criterio para definir <a href="https://www.argentina.gob.ar/coronavirus/aislamiento/fases" target="_blank" rel="noopener">las fases del aislamiento social</a>
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
					El comienzo de la pandemia en Argentina estuvo marcado por curvas muy empinadas en todos los distritos que tenían casos.
					<br/><br/>
                El ritmo era muy alto, es decir, el número de casos se duplicaba en pocos días (tiempo de duplicación muy corto) y todo el país estaba en fase 1 (aislamiento estricto).
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Considerando los datos de las últimas dos semanas, estas son las provincias en las que el número de casos confirmados se duplica en menos de 5 días.
					<br/><br/>
                    Es decir, el ritmo de la pandemia en estas provincias es muy alto
					<span class="pcias"></span>
				</p>
            </div>
            <div class='step' data-index='6'>
                <p>
					Estas son las provincias en las que sus casos confirmados se están duplicando con tiempos de entre 5 y 15 días.
					<span class="pcias"></span>
				</p>
            </div>

			<div class='step' data-index='7'>
                <p>
					En éstas, la duplicación de casos se da entre 15 y 25 días.
					<span class="pcias"></span>
				</p>
			</div>
			
			<div class='step' data-index='8'>
                <p>
					Y en estas provincias, donde los brotes parecen estar más controlados, y los casos se están duplicando muy lentamente (cada 25 días o más)...
					<span class="pcias"></span>
				</p>
			</div>

			<div class='step' data-index='9'>
                <p>
					...o también están aquellas que, directamente, no tienen casos nuevos.
					<span class="pcias"></span>
				</p>
			</div>

			<div class='step' data-index='10'>
                <p>
					Separar el <b>todo</b> en sus <b>partes</b> es muy importante para tomar decisiones, especialmente cuando el comportamiento de las partes difiere entre sí.
					<br/><br/>
					Y con las ciudades, ¿será igual? Exactamente; de la misma forma que separamos en partes por provincias, también podríamos hacerlo con ciudades.
                </p>
			</div>
			
			
			
        </article>

<!--         <div class='stepFijo' >
      
        </div>
 -->
    </div>

</section>


 <!-- Scripts -->
 <script>
	
	//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/E1_ritmoBis.csv"),
	d3.csv("https://datos.decodificar.org/E1_ritmo.csv"),
	d3.csv("https://datos.decodificar.org/E4_ritmo_prov.csv"),
	d3.csv("https://datos.decodificar.org/E4_Rango_Fecha.csv", d3.autoType),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {
	
    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="E4");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
 

    // **** CODIGO DEL SCROLLY *******


    const container = d3.select('#scrolly'); //busco el container total
    const stepSel = container.selectAll('.step'); // selecciono los "steps"

    function updateChart(index) {  // funcion que llama cada vez que cruza un humbral
        const sel = container.select(`[data-index='${index}']`);
        stepSel.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init() { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: stepSel.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index);
            }
        });
    }


    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, ejeX, tituloY, minDate, maxDate, line, linePais;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var svg = d3.select("#contenedorGrafico").append("svg"),
	marginTexto = isMobile ? 35:75,
    margin = isMobile ? {top: 35, right: 20, bottom: 15, left: 20} : {top: 50, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#contenedorGrafico').style('width').slice(0, -2),
    height = +d3.select('#contenedorGrafico').style('height').slice(0, -2)-25;;

d3.select("#contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);
		
    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

var parseTime = d3.timeParse("%Y-%m-%d");

var x = d3.scaleTime().range([0, width-marginTexto]);
var yLog = d3.scaleLog().range([height, 0]);

var yLogAxis = d3.axisLeft(yLog);
    yLogAxis.ticks(5).tickFormat(d3.format(",d")).tickSizeInner(-6);



var grafico = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	;
	
var clip = grafico.append("defs").append("svg:clipPath")
        .attr("id", "clip")
        .append("svg:rect")
        .attr("width", width )
        .attr("height", height )
        .attr("x", 0)
        .attr("y", 0);


	line = d3.line()
	.defined(d => d>0)
    .x((d,i) => x(dataParaGrafico.dates[i]))
	.y(d => yLog(d))
	;

	linePais = d3.line()
    .x(d => x(d.fecha))
	.y(d => yLog(d.casos_tot))
	;

	var tituloGrafico = 
        ["Número total de casos confirmados en cada distrito"
       ];
        tituloGrafico = isMobile?
        ["Total de casos confirmados por distrito"
        ]
		: tituloGrafico;
		

    var data = files[0] // datos principales;

	var duplicaciones = files[1] // funciones de duplicacion de casos;
	
	var dataProv = files[2] // datos provinciales;
	
	var rangosProv = files[3] // rangos de la primera curva;

		rangosProv = rangosProv.map(d=>{return {"name":d.prov, "porcentaje":d.porcentaje/100}});

    data.forEach(function(d) {
      d.fecha = parseTime(d.fecha);
      d.casos_tot = +d.casos_tot;
	});
	
    duplicaciones.forEach(function(d,i) {
      d.desdeX = parseTime(d.desdeX);
      d.hastaX = parseTime(d.hastaX);
      d.desdeY = +d.desdeY;
      d.hastaY = +d.hastaY;
      d.index = i;
	});
	
	dataProv.forEach(function(d) {
    	d.fecha = parseTime(d.fecha);
		d.casos_tot = +d.casos_tot;
		d.dup = isNaN(d.dup)? 1000 : +d.dup;
	});
	
	console.log(rangosProv);
	dataProv = d3.nest().key(d => d.prov).entries(dataProv)

		minDate = parseTime("2020-03-01"); //fecha de inicio el primero de marzo para que aparezca marzo!
		maxDate = d3.max(data, d => d.fecha);

	var dataParaGrafico = {
		series: dataProv.map(obj => {
					return {
						"name":obj.key,
						"dup":obj.values[obj.values.length-1].dup,
						"values":obj.values.map(r=>r.casos_tot)}
					})
						.sort((a, b) => d3.descending(a.values[a.values.length-1], b.values[b.values.length-1])),
    	dates: d3.timeDay.range(d3.min(data, d => d.fecha), d3.timeDay.offset(maxDate))
	}


	x.domain([minDate,maxDate]);
	var yDomainPais = [d3.min(data, function(d) { return d.casos_tot; }), d3.max(data, function(d) { return d.casos_tot; })+20000];
	var yDomainProv = [d3.min(dataProv, function(d) { return d.casos_tot; }), d3.max(data, function(d) { return d.casos_tot; })+20000];
	yLog.domain(yDomainPais);


	

     ejeX = grafico.append("g") // EJE X
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
        	.ticks(d3.timeMonth.every(1)))
        .call(ajustaMesesEjeX)
        ;

    ejeY = grafico.append("g") // EJE Y
        .attr("class", "axis axis--y")
	   	.call(yLogAxis)
	        ;
    
    tituloY = ejeY.append("text")
        .attr("class", "axis-title")
        .attr("y", -8)
        .text(tituloGrafico[0]);


    grafico.append("path") // Linea DE DATOS PAIS
		.attr("stroke", "black")
	 	.style("opacity",0)
	    .datum(data)
        .attr("class","linePais")
    	.attr("d", linePais);

	  var provincias = grafico.append("g").attr("id","provincias")
						  .attr("clip-path", "url(#clip)");

	

	provincias.selectAll("path") // AGREGA LAS LINEAS DE LAS PROVINCIAS
				.data(dataParaGrafico.series )
				.join("path")
				.attr("class", "prov line")
				.style("stroke", d=>coloreaCategorias(d.name))
				.attr("d", d => line(d.values));

		 d3.selectAll(".prov.line")
					//.attr("stroke-dasharray", totalLength + " " + totalLength)
					.attr("stroke-dasharray", function(d){ return this.getTotalLength()+ " " + this.getTotalLength()})	
					.attr("stroke-dashoffset", function(d){
						d.totalLength = this.getTotalLength();
						return 0;
						})	
					;

	//provincias.append("rect").attr("width",0).attr("height",height).style("opacity",0.8).attr("id","dimmer").attr("x",width).style("fill","#f1f1f1");

	var dataParaLabels = dataParaGrafico.series.map(r=>{  //Prepara la data para poner los labels
					return  {"labelY": yLog(r.values[r.values.length-1]),
							"name": r.name,
							"dup": r.dup,
							"values": r.values}
						});
	relax(dataParaLabels, 9); // Separa los labels para que no se pisen

	  provincias.selectAll("text")  // AGREGA LOS LABELS
				.data(dataParaLabels)
				.join("text")
					.attr("x",d=>x(dataParaGrafico.dates[d.values.length-1]))
					.attr("y",d=>d.labelY)
					.attr("dy", "3px")
					.attr("dx", "3px")
					.style("fill", d=>coloreaCategorias(d.name))
					.attr("class", "prov nombreProvincias")
					.text(d=>isMobile?nombresPcias[d.name][1]:nombresPcias[d.name][0]); // provinciasAbreviadas en caso de mobile (es una variable en el layout.njk)


	var tendencias = grafico.append("g") // DUPLICACIONES
					.attr("id", "duplicaciones")
					;

    tendencias.selectAll("path")
     .data(duplicaciones)
     .join("path")
        .attr("class", "tendencia")
        .style("opacity", 0)
        .attr('d', d => d3.line()([[x(d.desdeX), yLog(d.desdeY)],[x(d.hastaX), yLog(d.hastaY)]]))
        .style("stroke", d => colores(d.index+1));

    tendencias.selectAll("text")
     .data(duplicaciones)
     .join("text")
        .attr("class", d=>{return "duplicacionesTextos"+" duplica"+d.index})
        .style("opacity", 0)
        .attr('x', d => Math.abs(x(d.hastaX) - x(d.desdeX))/2+ x(d.desdeX))
        .attr('y', d => yLog(d.desdeY) - 10 - Math.abs(yLog(d.hastaY) - yLog(d.desdeY) )/2)
        .style("fill", d => colores(d.index+1))
        .text(d=> { return d.duplicacion + " días"});



		// Carga los nombres en modo texto en el Step
		d3.selectAll(".pcias").each( function(d){
			var nombres = [];
			switch (+d3.select(this.parentNode.parentNode).attr("data-index")) {
				case 5:
					nombres = dataParaLabels.filter(d=> d.dup < 5).map(r=>nombresPcias[r.name][0]);
					break;

				case 6:
					nombres = dataParaLabels.filter(d=> d.dup > 5 && d.dup < 15).map(r=>nombresPcias[r.name][0]);
					break;

				case 7:
					nombres = dataParaLabels.filter(d=> d.dup > 15 && d.dup < 25).map(r=>nombresPcias[r.name][0]);
					break;

				case 8:
					nombres = dataParaLabels.filter(d=> d.dup > 25 && d.dup < 100).map(r=>nombresPcias[r.name][0]);
					break;

				case 9:
					nombres = dataParaLabels.filter(d=> d.dup > 100).map(r=>nombresPcias[r.name][0]);
					break;
			
			}
				d3.select(this)
						.html(nombres.length?"Al <b>" + d3.timeFormat("%-d de %B")(maxDate).toLowerCase() +  "</b> son:<br> " + nombres.join(', ')+".":"Al <b>" + d3.timeFormat("%d de %B")(maxDate) +  "</b> no hay ninguna.")
				
			});
                
   

				init() // setea los scrollys


function scrollyTelling(step){

	var opacidadProvinciaApagada = 0.3;

   switch (step) {
		case 2: // muestra por provincia
				  
		case 0: // muestra por provincia
            d3.selectAll(".linePais").transition().duration(600).style("opacity",0);
			d3.selectAll(".prov").transition().duration(400)
					.style("opacity",1)
					;
            d3.selectAll(".tendencia").transition().duration(300).style("opacity",0);
			d3.selectAll(".duplicacionesTextos").transition().duration(300).style("opacity",0);
			break;

		case 1: // muestra pais
			d3.selectAll(".linePais").transition().duration(600).style("opacity",1);
            d3.selectAll(".prov").transition().duration(400).style("opacity",0);
			d3.selectAll(".tendencia").transition().delay((d,i)=>400+i*200).duration(300).style("opacity",1);
			d3.selectAll(".duplicacionesTextos").transition().delay((d,i)=>400+i*200).duration(300).style("opacity",1);
        	break;

		case 3: // 
			d3.selectAll(".prov.line").transition().duration(300).attr("stroke-dashoffset",0)
		        break;

		case 4: // muestra solo primera parte
			d3.selectAll(".prov.line").transition().duration(600).attr("stroke-dashoffset",d=>{
				return d.totalLength*(1-rangosProv.filter(r=>r.name==d.name)[0].porcentaje)})
			.on("end", d=>apagaProvincias(0,2000))
			break;
			
		case 5: // duplica en menos de 5 días
			d3.selectAll(".prov.line").transition().duration(300).attr("stroke-dashoffset",0)
			.on("end", d=>apagaProvincias(0,5))
			;
			break;

		case 6: // duplica en 5 a 15 días
			apagaProvincias(5,15);
			break;

		case 7: // duplica en 15 a 25 días
			apagaProvincias(15,25);
			break;


		case 8: // duplica en mas de 25
			apagaProvincias(25,100);
			break;

		case 9: // sin casos nuevos
			apagaProvincias(100,2000);
			break;

		case 10: // sin casos nuevos
			apagaProvincias(0,2000);
			break;
    }

	function apagaProvincias(min, max){  // Apaga los nombres y grisea las lineas

			d3.selectAll(".prov.line").transition().duration(600)
				.style("opacity",d=>{
						if(d.dup<max && d.dup>min) return 1;
						return opacidadProvinciaApagada;
					} )
				.style("stroke",d=>{
						if(d.dup<max && d.dup>min) return coloreaCategorias(d.name);
						return "silver";
					} )
					;

					// construyo un dataset temporal para posicionar los textos filtrados
			var dataParaLabelsTemp = dataParaGrafico.series.filter(d=>d.dup<max && d.dup>min).map(r=>{  //Prepara la data para poner los labels
						return  {"labelY": yLog(r.values[r.values.length-1]),
								"name": r.name}
							});

							// relajo lo anterior para que no se superpongan
			relax(dataParaLabelsTemp,9);

							// apago provincias que no estan y posicion las que si
			d3.selectAll(".prov.nombreProvincias").transition().duration(600)
				.style("opacity",d=>{
						if(d.dup<max && d.dup>min) return 1;
						return 0;
					} )
				.attr("y",d=>{
						if(d.dup<max && d.dup>min) return dataParaLabelsTemp.filter(r=>r.name==d.name)[0].labelY;
						return d.labelY;
					} )
					;
		}
          

}



//********** funciones

 
function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
        console.log(x.domain()[0],d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


// separa en el eje Y los datos que le lleguen con formato: 
// d.name // d.labelY // d.values
function relax(dataInterna, spacing) {
				spacing = spacing? spacing : 8;
				var dy = 1;
				var repeat = false;
				var count = 0;
				dataInterna.forEach(function(dA, i) {
					var yA = dA.labelY;
					dataInterna.forEach(function(dB, j) {
						var yB = dB.labelY;
						if (i === j) {
							return;
						}
						diff = yA - yB;
						if (Math.abs(diff) > spacing) {
							return;
						}
						repeat = true;
						magnitude = diff > 0 ? 1 : -1;
						adjust = magnitude * dy;
						dA.labelY = +yA + adjust;
						dB.labelY = +yB - adjust;
						dB.labelY = dB.labelY > height ? height : dB.labelY
						dA.labelY = dA.labelY > height ? height : dA.labelY
					})
				})
				if (repeat) {
					relax(dataInterna, spacing);
				}
			}

		});

</script>


<div class="note info"><p>En algunos lugares fue y es posible flexibilizar las medidas de aislamiento social antes que en otros. Pero, más importante aún,  ¡la evolución local de la pandemia puede ir cambiando! Y, por lo tanto, las medidas también. </p>
<p>Por ahora, no te olvides de seguir el ritmo de la pandemia en tu provincia.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>Hay que achatar la curva… ¿qué curva?</title>
    <url>/covid/achatar_la_curva/</url>
    <content><![CDATA[


<style>


    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }
    
    .axis--y .tick text{
        text-anchor: start;
    }

    .axis-title {
      fill: #222;
        font-size: 14px;
        text-anchor: start;
    }
    
    .line, .aspo {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 1px;
    }

    .aspo {
        stroke:#222;
        stroke-dasharray: 3px 1px;   
    }

    .tendencia{
        fill: none;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    .duplicacionesTextos{
        text-anchor: end;
        font-size: 14px;
        font-weight: 600;
    }

    .aspoTexto{
        text-anchor: start;
        font-size: 14px;
        font-weight: 600;
        fill: #222;
    }

    text.nombreserie{
        font-size: 11px;
        text-anchor: end;
        paint-order: stroke;
        stroke: #f1f1f1;
        stroke-width: 5px;
        stroke-linecap: butt;
        stroke-linejoin: round;
	}



    #avisoDuplicacion {
        position: absolute;
        top: 38%;
        right: 5%;
        width: 34%;
        background-color: #ffd1d3;
        line-height: 21px;
        font-size: 15px;
        padding: 8px 10px;
        border-radius: 5px;
        color: rgb(240, 78, 83);
        font-weight: bold;
        text-align: right;
    }

    #flechita{
        /* fill: #62BB46; */
        opacity: 0;
    }

    .label.activos{
        background: #F26522;
    }
     
     
    @media only screen and (min-width: 768px) {
        #avisoDuplicacion {
            top: 28%;
            right: 5%;
            width: 24%;
        }
    }
    
</style>


<section id='scrolly'>
    <div class='scrolly'>


        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="contenedorGrafico" class='sticky' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    Escuchamos todo el tiempo que hay una curva que tenemos que achatar, pero en esta pandemia hay muchas curvas distintas. ¿A qué curva nos estamos refiriendo?
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    Todo sistema de salud tiene una cierta capacidad que en esta pandemia está marcada, sobre todo, por la cantidad de camas disponibles (especialmente las camas de terapia intensiva o UTI). Por ejemplo, el número total de camas de UTI es el que vemos en este gráfico.
                    <br/><br/>
                    También hay otros factores a tener en cuenta como la cantidad de profesionales de la salud, distribución de los recursos, medicamentos, etc.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Esta capacidad límite queda representada en el gráfico como un <b>techo</b> que nuestra curva nunca tiene que superar.
                    <br/><br/>
                    Este techo puede modificarse con el tiempo si se adquieren respiradores, se montan nuevos hospitales, etc. Esto es lo que sucedió en nuestro país cuando se aumentaron las camas de UTI durante los primeros meses del Aislamiento Social Preventivo Obligatorio. 
                </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    Por otro lado, está la curva que estamos acostumbrados a ver en todos lados, y que no parece muy aplanada. Representa el número de casos confirmados acumulado en el tiempo, es decir que muestra todas las personas que alguna vez tuvieron testeo positivo. Pero ...
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    … sabemos que algunas de esas personas ya están recuperadas y otras fallecieron. Estas ya no ocuparán camas de hospitales ni necesitarán respiradores (y además ya no transmiten el virus).
                    <br/><br/>
                Las que quedan son las personas que tienen COVID-19 en el presente: <mark class="label activos">los casos activos</mark>.
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Los casos activos son los que necesitan o pueden llegar a necesitar camas de algún hospital (y aún siguen contagiando). Una parte muy pequeña de esos casos activos (1 -2%) requerirán un respirador.
                    <img src="/images/CasosActivos.png">
                </p>
                
            </div>
            <div class='step' data-index='6'>
                <p>
                    Mirando la curva del número total de casos perdés la distinción entre los grupos: los casos activos por un lado, y los recuperados + fallecidos por el otro.
                </p>
            </div>

            <div class='step' data-index='7'>
                <p>
                    Entonces, si las personas que ya están curadas o fallecieron no van a usar camas, y si el número de camas marca el límite del sistema de salud, el número de casos activos debe estar siempre debajo de las camas totales. Por eso, <b>la curva que queremos achatar</b> es en realidad la de <mark class="label activos">los casos activos</mark> (que te mostramos acá). 
                </p>
            </div>

            <div class='step' data-index='8'>
                <p>
                    Y más crítico aún es que los casos activos internados en UTI estén por debajo de la línea de camas disponibles de UTI. 
                    <br/><br/>
                    Este es el escenario a nivel nacional. Si hay  brotes locales, el techo es el número de cama UTI de ese lugar. Y por eso, la situación en cada lugar puede ser distinta.
                </p>
            </div>


        </article>

        

    </div>

</section>


 <!-- Scripts -->
 <script>

//********************* CARGA DATOS ************



Promise.all([
    d3.csv("https://datos.decodificar.org/I2_achatar_curva.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {

    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="I2");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
       
       console.log(epigrafeData)
    // **** CODIGO DEL SCROLLY *******


    const container = d3.select('#scrolly'); //busco el container total
    const stepSel = container.selectAll('.step'); // selecciono los "steps"

    function updateChart(index) {  // funcion que llama cada vez que cruza un humbral
        const sel = container.select(`[data-index='${index}']`);
        stepSel.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init() { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: stepSel.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index);
            }
        });
    }
 

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
colores.domain(["Total","Camas UTI","Internados en UTI","Activos","Recuperados + fallecidos"]);
        
var ejeY, tituloY;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var flechita = 'M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z';

var svg = d3.select("#contenedorGrafico").append("svg"),
	marginTexto = isMobile ? 0:0,
    margin = isMobile ? {top: 35, right: 20, bottom: 15, left: 20} : {top: 50, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#contenedorGrafico').style('width').slice(0, -2),
    height = +d3.select('#contenedorGrafico').style('height').slice(0, -2)-25;

d3.select("#contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);


    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

    
	var tituloGrafico = 
        ["Activos, internados UTI y camas UTI (Arg)",  "Total de casos confirmados (Arg)",
        "Totales, Activos y Fallecidos + recuperados (Arg)", "Casos activos (Arg)", "Activos, internados UTI y camas UTI (Arg)"
       ];
    
       tituloGrafico = isMobile?
        ["Activos, internados UTI y camas UTI (Arg)", "Total de casos confirmados (Arg)",
        "Totales, Activos y Fallecidos + recuperados", "Casos activos (Arg)", "Activos, internados UTI y camas UTI"
       ]: tituloGrafico;
        
        

var parseTime = d3.timeParse("%Y-%m-%d");

var x = d3.scaleTime().range([0, width-marginTexto]);
var y = d3.scaleLinear().range([height, 0]);
var yLog = d3.scaleLog().range([height, 0]);

var yAxis = d3.axisLeft(y);
    yAxis.ticks(8).tickFormat(d3.format(",d")).tickSizeInner(-6);

var yLogAxis = d3.axisLeft(yLog);
    yLogAxis.ticks(5).tickFormat(d3.format(",d")).tickSizeInner(-6);

var line = d3.line()
	.defined(d => d>0)
    .x((d,i) => x(dataParaGrafico.dates[i]))
    .y(d => yLog(d))
    

var grafico = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

 
var data = files[0] // datos principales;

    data.forEach(function(d) {
      d.fecha = parseTime(d.fecha);
      d.casos_tot = isNaN(+d.casos_tot)?0:+d.casos_tot;
      d.casos_recuperados = isNaN(+d.casos_recuperados)?0:+d.casos_recuperados;
      d.casos_fallecidos = isNaN(+d.casos_fallecidos)?0:+d.casos_fallecidos;
      d.casos_activos_Arg = isNaN(+d.casos_activos_Arg)?0:+d.casos_activos_Arg;
      d.casos_recup_fall = isNaN(+d.casos_recup_fall)?0:+d.casos_recup_fall;
      d.casos_UTI_Arg = isNaN(+d.casos_UTI_Arg)?0:+d.casos_UTI_Arg;
      d.camas_UTIARG = isNaN(+d.camas_UTIARG)?0:+d.camas_UTIARG;
    });

    var series = [
                    {"name":"Activos" , "values": data.map(r=>r.casos_activos_Arg)},
                    {"name":"Internados en UTI", "values": data.map(r=>r.casos_UTI_Arg)},
                    {"name":"Total" , "values": data.map(r=>r.casos_tot)},
                    {"name":"Recuperados + fallecidos" , "values": data.map(r=>r.casos_recup_fall)},
                    {"name":"Camas UTI" , "values": data.map(r=>r.camas_UTIARG)}
                ];

                series.forEach(element => {
                    if (element.values[element.values.length-1] == 0){
                        element.values[element.values.length-1] = element.values[element.values.length-2]
                    }
                    
                 });
        

    

		minDate = parseTime("2020-03-01"); //fecha de inicio el primero de marzo para que aparezca marzo!
		maxDate = d3.max(data, d => d.fecha);

	var dataParaGrafico = {
		series: series,
    	dates: d3.timeDay.range(d3.min(data, d => d.fecha), d3.timeDay.offset(maxDate))
	}
    console.log(dataParaGrafico);


    x.domain([parseTime("2020-03-01"),d3.max(data, function(d) { return d.fecha; })]);
    y.domain([d3.min(data, function(d) { return d.casos_tot; }), d3.max(data, function(d) { return d.casos_tot; })+20000]);
    yLog.domain(y.domain());


     grafico.append("g") // EJE X
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
        .ticks(d3.timeMonth.every(1)))
        .call(ajustaMesesEjeX)
        ;

    ejeY = grafico.append("g") // EJE Y
        .attr("class", "axis axis--y")
       .call(yLogAxis)
       ;
    
    tituloY = ejeY.append("text")
        .attr("class", "axis-title")
        .attr("y", -8)
        .text(tituloGrafico[0]);

        grafico.append("g").attr("id","series")
                .selectAll("path") // AGREGA LAS LINEAS
				.data(dataParaGrafico.series)
				.join("path")
                .attr("class", "prov line")
                .attr("id", d=>d.name)
                .style("opacity",(d,i)=>i<2||i==4?1:0)
				.style("stroke", d=>colores(d.name))
                .attr("d", d => line(d.values));
                
                var dataParaLabels = dataParaGrafico.series.map(r=>{  //Prepara la data para poner los labels
					return  {"labelY": r.values[r.values.length-1],
							"name": r.name,
							"values": r.values}
						});
	relax(dataParaLabels, 9); // Separa los labels para que no se pisen

      grafico.append("g").attr("id","labels")
                .selectAll("text")  // AGREGA LOS LABELS
				.data(dataParaLabels)
				.join("text")
					.attr("x",d=>x(dataParaGrafico.dates[d.values.length-1]))
					.attr("y",d=>yLog(d.labelY))
					.attr("dy", "-4px")
					.attr("dx", "-3px")
					.style("fill", d=>colores(d.name))
                    .attr("class", "prov nombreserie")
                    .style("opacity",(d,i)=>i<2||i==4?1:0)
					.text(d=>d.name); 

       
    var flechita = grafico.append("g").attr("id","flechita")
                        .attr("transform","translate("+ x(parseTime("2020-06-12")) +","+y(52517)+")")
                        .append("path")
                        .attr("d", flechita)
                        .style("fill",colores("Camas UTI"))
                        .attr("transform","translate(-3,-3) scale(0.08) rotate(135)")

                        ;

                init();


                function scrollyTelling(step){
                        var cambia = {};
                        var opacidadProvinciaApagada = 0.2;

                        switch (step) {
                            case 0: // muestra activos y UTI y camas
                            tituloY.text(tituloGrafico[0])

                                y.domain([1,d3.max(data, d=> d.casos_tot)+20000]);
                                    cambiaTipo("log")        
                                break;

                            case 1: // resalta cambio en camas
                                y.domain([1,d3.max(data, d=> d.casos_activos_Arg)+5000]);
                                cambiaTipo("linear")        
                                d3.select("#flechita").transition().duration(600).style("opacity",0)
                                tituloY.text(tituloGrafico[0])
                                break;
                                

                            case 2:
                            tituloY.text(tituloGrafico[0])
                            y.domain([1,d3.max(data, d=> d.casos_activos_Arg)+5000]);
                                d3.selectAll(".prov").transition().duration(400)
                                        .style("opacity",d=>{
                                            if(d.name=="Activos") return 1;
                                            if(d.name=="Internados en UTI") return 1;
                                            if(d.name=="Camas UTI") return 1;
                                            return 0;
                                        }).on("end", d=>cambiaTipo("linear"))   
                                d3.select("#flechita")
                                    .transition().duration(600).style("opacity",1)
                                break;

                             case 3: // muestra pais
                             tituloY.text(tituloGrafico[1])
                                y.domain([1,d3.max(data, d=> d.casos_tot)+20000]);
                               d3.select("#flechita").transition().duration(600).style("opacity",0)
                               d3.selectAll(".prov").transition().duration(400)
                                        .style("opacity",d=>{
                                            if(d.name=="Total") return 1;
                                            return 0;
                                        }).on("end", d=>cambiaTipo("linear"))          
                                break;
                           
                            case 4: // muestra activos totales y Recuperados + fallecidos
                            case 5:
                            case 6:
                            tituloY.text(tituloGrafico[2])
                              d3.selectAll(".prov").transition().duration(400)
                                        .style("opacity",d=>{
                                            if(d.name=="Total") return 1;
                                            if(d.name=="Activos") return 1;
                                            if(d.name=="Recuperados + fallecidos") return 1;
                                            return 0;
                                        }).on("end", d=>cambiaTipo("linear"))        
                                break; 

                             case 7: // totales en log
                             tituloY.text(tituloGrafico[3])
                                 d3.selectAll(".prov").transition().duration(400)
                                        .style("opacity",d=>{
                                            if(d.name=="Activos") return 1;
                                            return 0;
                                        }).on("end", d=>cambiaTipo("log"))    
                                break; 
                            
                            case 8: // resalta cambio en camas
                            tituloY.text(tituloGrafico[0])
                              d3.selectAll(".prov").transition().duration(400)
                                        .style("opacity",d=>{
                                            if(d.name=="Activos") return 1;
                                            if(d.name=="Internados en UTI") return 1;
                                            if(d.name=="Camas UTI") return 1;
                                            return 0;
                                        })    
                                break;

                        }
        function cambiaTipo(tipo){
        if(tipo == "log"){
            ejeY.transition().duration(600).call(yLogAxis);
            line.y(function(d) { return yLog(d); });

            d3.selectAll(".prov.line")
                .transition().duration(600)
                .attr("d", d => line(d.values));
        
                d3.selectAll(".prov.nombreserie").transition().duration(600)
                .attr("y",d=>yLog(d.labelY))
                    ;
           
            
        }else if (tipo == "linear"){
            ejeY.transition().duration(600).call(yAxis);
            line.y(function(d) { return y(d); });
            d3.selectAll(".prov.line")
                .transition().duration(600)
                .attr("d", d => line(d.values));

            d3.selectAll(".prov.nombreserie").transition().duration(600)
                .attr("y",d=>y(d.labelY))
                    ;
            //d3.select("#flechita").transition().duration(600).attr("transform","translate("+x(parseTime("2020-03-22"))+","+y(11517)+")")        
            
            }

        
    }
      

}



//********** funciones


function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
        console.log(x.domain()[0],d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


// separa en el eje Y los datos que le lleguen con formato: 
// d.name // d.labelY // d.values
function relax(dataInterna, spacing) {
            spacing = spacing? spacing : 8;
            var dy = 1;
            var repeat = false;
            var count = 0;
            dataInterna.forEach(function(dA, i) {
                var yA = dA.labelY;
                dataInterna.forEach(function(dB, j) {
                    var yB = dB.labelY;
                    if (i === j) {
                        return;
                    }
                    diff = yA - yB;
                    if (Math.abs(diff) > spacing) {
                        return;
                    }
                    repeat = true;
                    magnitude = diff > 0 ? 1 : -1;
                    adjust = magnitude * dy;
                    dA.labelY = +yA + adjust;
                    dB.labelY = +yB - adjust;
                    dB.labelY = dB.labelY > height ? height : dB.labelY
                    dA.labelY = dA.labelY > height ? height : dA.labelY
                })
            })
            if (repeat) {
                relax(dataInterna, spacing);
            }
        }

    });


</script>


<p>Para nuestro sistema de salud, o el de cualquier otro país, es muy importante que la curva se achate lo más posible para que nunca llegue a su límite.</p>
<p>Basándonos en la experiencia de otros países, mirá lo que probablemente habría ocurrido si no se hubiesen tomado medidas de contención/mitigación.<br><img src="/images/CurvaAnimada.gif" alt="Image of Yaktocat"></p>
<div class="note info"><p>Achatar la curva implica que, además de tener un pico más bajo, tengamos un pico más <strong>tardío</strong>.</p>
<p>Eso nos da más tiempo para mejorar los servicios de salud (comprar más respiradores, por ejemplo) e implementar políticas como el rastreo de contactos. Pero también hace que la evolución de la pandemia se alargue en el tiempo.</p>
<p>Entender la evolución de la pandemia y qué efecto tienen las medidas nos ayuda a decidir qué camino tomar.</p>
</div>

]]></content>
  </entry>
  <entry>
    <title>¿Es esperable que cada día haya récord de contagios?</title>
    <url>/covid/record_de_contagios/</url>
    <content><![CDATA[



<style>


    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }
    
    .axis--y .tick text{
        text-anchor: start;
	}
	
	text.nombreProvincias{
		font-size: 11px;
	}


    .axis-title {
      fill: #222;
        font-size: 16px;
        text-anchor: start;
    }
    
    .line {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 1px;
    }
    .linePais {
      fill: none;
      stroke: #00468B;
      stroke-width: 2px;
	}
	
	
    .tendencia{
        fill: none;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    .duplicacionesTextos{
        text-anchor: end;
        font-size: 14px;
        font-weight: 600;
	}
	
	span.pcias{
		display: block;
		margin-top: 11px;
	}
  
	#contenedorGrafico.sticky{
			margin-bottom: 191px;
        }
        
    .label.desconocido{
        background: #8B6BAF45;
        color:rgb(58, 58, 58) !important;
        font-weight: 400 !important;
    }
     
    
    .label.naranja{
        background: #F26522;

    }

    .label.naranjaclaro{
        background: #F2652277;

    }
    .label.celeste{
        background: #5badd4;

    }

    .label.violeta{
        background: #8B6BAF;

    }

    .label.gris{
        background: #696969;

    }
     
    #grafico2{
        padding-top: 1px;
    }
    
    #grafico2 #gifHolder{
        margin: 5vh 6px;
        position: relative;
        height: 100%;
    }

    #gifHolder img{
        top: 0px;
        left:0px;
        position: absolute;
        max-height: 85%;
    }

    .epigrafe{
        margin-top: -5px;
    margin-left: 30px;
    position: absolute;
    bottom: 9px;
    }

    #gifHolder #img02,#gifHolder #img03{
        opacity: 0;
    }


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
     
    @media only screen and (min-width: 768px) {
        #grafico2 #gifHolder{
                margin: 5vh 30px;
            }

    }
    
</style>


<section id='scrolly1'>
    <div class='scrolly'>
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico1" class='sticky contenedorGrafico' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
				<p>Varias veces por semana encontramos en las noticias el anuncio de 
                    <mark class="label naranja">cada nuevo récord de casos diarios</mark>, rompiendo el récord de los <mark class="label naranjaclaro">días anteriores</mark>. La pregunta surge inmediatamente: ¿significa que estamos peor?
                <br/><br/>
                Dado que se trata de una pandemia, te proponemos cambiar de pregunta: ¿es <b>esperable</b> quebrar el récord cada día?
                </p>
            </div>
            
     </article>
		
	</div>

	

</section>

<section id='scrolly2'>
    <div class='scrolly'>
 
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico2" class='sticky contenedorGrafico' >
            <div id="gifHolder">
                <img id="img01" src="/images/contagios-b01.gif">
                <img id="img02" src="/images/contagios-b02.gif">
                <img id="img03" src="/images/contagios-b03.gif">
            </div>
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    Para entender, arranquemos con estos dos ejemplos más simples.
                    <br/><br/>
                    ¿Qué pasa con el número total de personas que se han <mark class="label gris">prestado un libro</mark> o que han <mark class="label naranja">contraído la enfermedad</mark>?
                     En ambos casos crece, pero <b>los resultados son diferentes</b> porque <b>los mecanismos son diferentes</b>.
                </p>
            </div>
            <div class='step' data-index='1'>
                <p>
					En el caso del libro prestado, es imposible prestarlo a más de una persona al mismo tiempo y entonces el número de personas <mark class="label gris">crece de a uno</mark>.
                    <br/><br/>
                    En el caso de esta enfermedad imaginaria, cada persona puede transmitirla involuntariamente a otras dos personas, y cada una de estas a su vez a otras dos, y así sucesivamente. El número de personas con la enfermedad crece mucho más rápido: se dice que 
                    <mark class="label naranja">crece de forma geométrica o exponencial</mark>.
                    </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    ¿Qué pasa con el número de personas <b>nuevas</b> cada día? El <mark class="label naranja">ejemplo de la enfermedad</mark> 
                    no solo crece más rápido que el <mark class="label gris">libro prestado</mark>, sino que además crece <b>cada vez más rápido: el número de casos nuevos es cada día mayor</b> que el día anterior.
				</p>
            </div>
            <div class='step' data-index='3'>
                <p>
					La dinámica del <mark class="label gris">libro prestado</mark> suma un número fijo de personas nuevas en cada día.
                    <br/><br/>
                    En cambio, la <mark class="label naranja">propagación de la enfermedad</mark> multiplica el número de casos nuevos en cada día (en este ejemplo simplificado se multiplica por dos).
				</p>
			</div>
			
			<div class='step' data-index='4'>
                <p>
                    Fijate que, sin importar cuántos casos haya, la enfermedad tarda lo mismo en duplicar de 1 a 2 casos (un día) que en duplicar de 4 a 8 (un día). En este ejemplo muy simple el <a href="/covid/el_ritmo_de_la_pandemia/">tiempo de duplicación</a> es de un día.
                <br/><br/>
                Y si tratamos de evitar los contagios… ¿cambia algo?
				</p>
            </div>
            
            <div class='step' data-index='5'>
                <p>
                    Evitar o reducir el número de contagios es el objetivo de las medidas de mitigación/contención: que la chance de contagiarse sea menor. Pero no es tan fácil... 
                    <br/><br/>
                    Si las medidas <b>no logran reducir lo suficiente</b> la tasa de contagio, el número de casos nuevos <b>seguirá aumentando día a día.</b>
				</p>
            </div>
            
            <div class='step' data-index='6'>
                <p>
                    Y a esto hay que agregarle que los efectos de cualquier medida tardan muchos días en verse, por ejemplo, por el tiempo que hay entre el momento del contagio y la aparición de síntomas o la  <a href="/covid/la_cantidad_de_contagiados">detección por test</a>.
				</p>
            </div>
            
			
        </article>
    </div>

</section>


<section id='scrolly3'>
    <div class='scrolly'>
 
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico3" class='sticky contenedorGrafico' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    Entonces, durante las etapas iniciales de una pandemia <b>es esperable</b> que rompamos cada día el récord de casos nuevos (más allá de fluctuaciones normales como las que vemos en los datos reales).
                </p>
            </div>
            <div class='step' data-index='1'>
                <p>
                    Y no solo eso. Además es esperable romperlo <b>inclusive en presencia de medidas</b> de mitigación/contención, aunque quizás con un <a href="/covid/el_ritmo_de_la_pandemia">ritmo</a> menor.
                    <br/><br/>                    
                    La novedad debería ser, en todo caso, que durante varios días <b>no se haya roto el récord</b>, lo que podría apuntar al éxito de las medidas.
                </p>
            </div>
            
			
        </article>
    </div>

</section>

 <!-- Scripts -->
 <script>
	
	//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/E3_contagiados_total.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {
   
    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="E2");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
       


    // **** CODIGO DEL SCROLLY *******


    const container1 = d3.select('#scrolly1'); //busco el container total
	const container2 = d3.select('#scrolly2'); //busco el container total
    const container3 = d3.select('#scrolly3'); //busco el container total

    const stepSel1 = container1.selectAll('.step'); // selecciono los "steps"
	const stepSel2 = container2.selectAll('.step'); // selecciono los "steps"
	const stepSel3 = container3.selectAll('.step'); // selecciono los "steps"

    function updateChart(index, what,containerNumber) {  // funcion que llama cada vez que cruza un humbral
        const sel = d3.select('#scrolly'+containerNumber).select(`[data-index='${index}']`);
        what.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(containerNumber,index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init(what,containerNumber) { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: what.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index,what,containerNumber);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index,what,containerNumber);
            }
        });
    }
  

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, ejeX, tituloY, minDate, maxDate, imagenAMostrar=1, actualImagen=0;
;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var svg = d3.selectAll(".contenedorGrafico").filter((d,i)=>i==1?0:1).append("svg"),
    margin = isMobile ? {top: 35, right: 20, bottom: 15, left: 20} : {top: 50, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#grafico1').style('width').slice(0, -2),
    height = +d3.select('#grafico1').style('height').slice(0, -2)-25;


 d3.selectAll(".contenedorGrafico").append("div").attr("class","epigrafe")
            .html((d,i)=>{
                if(i==1) return "www.decodificar.org";
                return "www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente}
                );

    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

	var parseTime = d3.timeParse("%Y-%m-%d");

///******** MANEJO DE DATOS ********
	var data = files[0] // datos principales;

    var record=1;
		data.forEach(element => {
			element.fecha = parseTime(element.fecha);
            element.casos_diarios = +element.casos_diarios;
            if(+element.casos_diarios>record){
            element.record = 1;
            record = +element.casos_diarios;
            }
            
		});

		

//***************

	minDate = parseTime("2020-03-01"); //fecha de inicio el primero de marzo para que aparezca marzo!
	maxDate = d3.max(data, d => d.fecha);


	var x = d3.scaleTime()
			.range([0, width])
			.domain([minDate,maxDate]);

	var y = d3.scaleLinear()
			.range([height,0])
			.domain([0,d3.max(data,d=>d.casos_diarios)]);
	
	

	var yAxis = d3.axisLeft(y);
		yAxis.ticks(4).tickFormat(d3.format(",d")).tickSizeInner(-6);


	svg.append("g")
    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	;

	svg.each(function(d,i){
        d3.select(this).select("g").attr("class",()=>{
        //if(i==0||i==2) return "gInterno0"
        return "gInterno0"});

	})

 
	var gBarras = d3.selectAll(".gInterno0");
	//var gGifs = d3.select(".gInterno1");

    ejeX = gBarras.append("g") // EJE X
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
        	.ticks(d3.timeMonth.every(1)))
        .call(ajustaMesesEjeX)
        ;

    ejeY = gBarras.append("g") // EJE Y
        .attr("class", "axis axis--y")
	   	.call(yAxis)
	        ;
    
    tituloY = ejeY.append("text")
        .attr("class", "axis-title")
        .attr("y", -8)
        .text("Número de casos diarios confirmados (Arg.)");

	
		gBarras.append("g")
               .selectAll("rect")
                .data(data)
                    .join("rect")
                    .attr("class","barrasGrafico")
                    .attr("fill", d => d.record?"#F26522":"#F2652277")
                    //.attr("fill", "#8B6BAF")
                    .attr("x", (d, i) => x(d.fecha))
                    .attr("y", d => y(d.casos_diarios))
                    .attr("height", d => y(0) - y(d.casos_diarios))
                    .attr("width",  (x(parseTime("2020-03-02"))-1)>1?(x(parseTime("2020-03-02"))-1):1)
        ;
        



    init(stepSel1,1)
    init(stepSel2,2)
    init(stepSel3,3)


function scrollyTelling(containerNumber,step){

    if(containerNumber == 1){  //GRAFICO PRIMER SCROLLY
		switch (step) {
			case 0:
			break;

			case 1:

            break;
	    }
 
  
	}else{

        
            switch (step) { //GAFICO SEGUNDO SCROLLY
                case 0: 
                case 1: 
                imagenAMostrar = "#img01";
                  break;

                case 2: 
                case 3:
                case 4:
                imagenAMostrar = "#img02";
                break;

                case 5:
                case 6:
                imagenAMostrar = "#img03";
                break;

           }
           if (actualImagen == 0) actualImagen = imagenAMostrar;
           if (actualImagen!=imagenAMostrar){
               actualImagen = imagenAMostrar;
                d3.select("#gifHolder").selectAll("img").transition().duration(300).style("opacity",0);
                d3.select(imagenAMostrar).transition().delay(303).duration(300).style("opacity",1);
                }

                    
    }
          

}



//********** funciones
function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
        console.log(x.domain()[0],d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


//*****
});

</script>


<div class="note info"><p>Esta pandemia, como todos los fenómenos con crecimiento exponencial, desafía nuestra intuición. Entender cómo funciona y cuál es el patrón que la gobierna nos ayuda a prestar atención a lo importante y tomar mejores decisiones en función de eso.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>Historia de un caso</title>
    <url>/covid/historia_de_un_caso/</url>
    <content><![CDATA[


<style>



  

    svg text{
        font-size: 11px;
    }
    
    .epigrafe{
        margin-top: 0;
    }     
 
    .flechitas{
        fill:none;
        
        stroke: rgb(0, 0, 0);
        stroke-linecap: round;
        stroke-linejoin: round;
    }
    .label.naranja{
        background: #F26522;

    }

    .label.celeste{
        background: #5badd4;

    }

    
    .label.gris{
        background: gray;

    }


    .label.violeta{
        background: #8B6BAF;

    }

    @media only screen and (min-width: 768px) {
        .epigrafe{
            margin-top: inherit;
        }     
        
        svg text{
            font-size: 12px;
        }
        
    }
    
</style>


<section id='scrolly'>
    <div class='scrolly'>
        

        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="contenedorGrafico" class='sticky' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p> Todas las enfermedades infecciosas tienen una forma de inicio, un período de incubación, seguido de una etapa de aparición de síntomas, un curso de la enfermedad que puede ser corto o largo y finalmente un determinado desenlace. A eso le llamamos “historia de la enfermedad”.
                    <br/><br/>
                    Resulta que la enfermedad por infección por COVID-19 también tiene una historia particular, y ahora te la vamos a contar…
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    La historia de la enfermedad por COVID-19 comienza cuando una persona toma contacto con el virus y lo contrae.
                    <br/><br/>
                    Supongamos que todas las personas en este grupo adquirieron la enfermedad. ¿Cómo sigue esto?
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Algunas de esas personas (aproximadamente 15%), aunque tengan COVID-19, <b>nunca van a desarrollar ningún síntoma</b>. Son las que denominamos  “casos asintomáticos”.
                    <br/><br/>
                    El grupo de asintomáticos es especialmente importante porque difícilmente se los testea (y por ende nunca formarán parte de lo que consideramos 
                    <a href="/covid/la_cantidad_de_contagiados/">“casos confirmados”</a>) pero tienen capacidad de transmitir el virus. Una forma de detectar a los asintomáticos es haciendo testeos masivos, que son complicados y caros. Pasado un determinado tiempo, van a recuperarse y dejar de transmitir el virus.
                </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    La historia continúa, porque la otra gran parte de las personas que tienen COVID-19 <b>sí van a tener síntomas</b> (aproximadamente 85%). Estas son capaces de transmitir el virus y tienen más probabilidades de que, por sus síntomas, se las testee.
                    <br/><br/>
                    A diferencia de los asintomáticos, este <mark class="label violeta">grupo de “sintomáticos”</mark> es conocido para nosotros porque, en general los testeamos y, cuando dan positivo, van a figurar en los casos confirmados.
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    Aquí la historia empieza a complejizarse porque dentro del grupo de “sintomáticos” vamos a encontrar que los síntomas pueden ser más bien leves, similares a una gripe común, en la gran mayoría de los casos (80%) y más graves en los demás.
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Los casos leves deben cumplir el aislamiento y esperar la recuperación en sus domicilios.
                <br/><br/>
                Las <mark class="label naranja">personas que tienen síntomas más graves</mark> requerirán hospitalización. Una vez internadas en el hospital, la mayoría irá mejorando de a poco hasta la recuperación completa. Un <mark class="label gris">grupo muy pequeño, lamentablemente, morirá</mark> por COVID-19 en el hospital (1% de los casos totales).
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Los que hemos detectado con el test y aún no se han recuperado ni han fallecido son los que denominamos <a href="/covid/achatar_la_curva/">casos activos</a>. Los casos activos y los asintomáticos son los que pueden contagiar el virus y podrían requerir asistencia del sistema de salud.
                    <br/><br/>
                    Los casos activos tienen una dinámica que es muy importante para el sistema de salud. ¿A qué nos referimos con esto? 
                </p>
            </div>
            <div class='step' data-index='7'>
                <p>
                    Tomemos el conjunto de personas que contrajeron la enfermedad y se recuperaron. Es importante tener en cuenta que, en la realidad, no todas las personas adquieren la enfermedad al mismo tiempo sino que cada una se contagia, transita la enfermedad y se recupera en distintos momentos.
                </p>
            </div>

            <div class='step' data-index='8'>
                <p>
                    Para simplificar, acá estamos considerando por ejemplo que la duración de la enfermedad en todas las personas es la misma. Y que todas las personas tienen historias similares. La realidad es más diversa y compleja, pero la idea es la misma: no todas las personas transcurren la enfermedad en los mismos tiempos.
                </p>
            </div>

            <div class='step' data-index='9'>
                <p>
                    Si quisiéramos "tomar una foto" del estado del COVID-19 en un determinado día en nuestro país, encontraríamos que cada caso está atravesando en realidad un momento distinto de su historia. Lo más parecido que tenemos a esa foto es el registro detallado de los casos activos.
                </p>
            </div>

            <div class='step' data-index='10'>
                <p>
            Además debemos tener en cuenta que, con el fin de facilitar el análisis, dejamos de lado algunas condiciones como los casos descartados y los falsos negativos, y simplificamos otras (por ejemplo, hay algunos casos recuperados que han vuelto a contagiarse, y hay casos que comenzaron leves y que pasaron a graves antes de su recuperación).
                </p>
            </div>
        </article>


    </div>

</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
/*     d3.csv("https://datos.decodificar.org/E1_ritmoBis.csv"),
    d3.csv("https://datos.decodificar.org/E1_ritmo.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas.csv")
 */
]).then(function(files) {

    // **** CODIGO DEL SCROLLY *******

    const container = d3.select('#scrolly'); //busco el container total
    const stepSel = container.selectAll('.step'); // selecciono los "steps"

    function updateChart(index) {  // funcion que llama cada vez que cruza un humbral
        const sel = container.select(`[data-index='${index}']`);
        stepSel.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init() { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: stepSel.nodes(),
            offset: 0,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index);
            }
        });
    }
 

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var svg = d3.select("#contenedorGrafico").append("svg"),
    marginTexto = isMobile ? 30:45,
    margin = isMobile ? {top: 15, right: 30, bottom: 15, left: 40} : {top: 25, right: 40, bottom: 5, left: 65},
    width =  +d3.select('#contenedorGrafico').style('width').slice(0, -2),
    height = +d3.select('#contenedorGrafico').style('height').slice(0, -2)-25;

    d3.select("#contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org");


    if (!isMobile && height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    


var grafico = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    ;

    
    // Agrego tipito como symbolo
    svg.append("symbol").attr("id","tipito").attr("y",-20).attr("x",-10)
        .append("path").attr("d","M10,3C7.8,3,5.9,4.8,5.9,7.1s1.8,4.1,4.1,4.1s4.1-1.8,4.1-4.1S12.2,3,10,3 M16.1,15.2v8.6c0,0.8-0.7,1.5-1.5,1.5h-1v8.6c0,0.8-0.7,1.5-1.5,1.5H8c-0.8,0-1.5-0.7-1.5-1.5v-8.6h-1c-0.8,0-1.5-0.7-1.5-1.5v-8.6c0-1.7,1.4-3,3-3h0.7c1.5,0.7,3.2,0.7,4.6,0H13C14.7,12.1,16.1,13.5,16.1,15.2z");
    

    
    // agrego punta de flecha

    var arrowPoints = [[1, 1], [4, 4], [1, 7]];

    var markerBoxWidth = 5, markerBoxHeight = 8;
    svg
    .append('defs')
    .append('marker')
    .attr('id', 'arrow')
    .attr('refX', 3)
    .attr('stroke-width', 1.2)
    .attr('refY', markerBoxHeight/2)
    .attr('markerWidth', markerBoxWidth)
    .attr('markerHeight', markerBoxHeight)
    .append('path')
    .attr('d', d3.line()(arrowPoints))
    .attr("class","flechitas");

 
    

                    var padding = 15, anchoGrafico = width-margin.right;

     

        var casos = [
             {name:"general", subitems:[
                 {label:"Infección", color:codigoColor("verde"), pos:0, labelLink:""},
                 {label:"Aparición de síntomas", color:codigoColor("violeta"), pos:0.5,labelLink:"Incubación"},
                 {label:"Recuperación o Fallecimiento", color:"gray", pos:1, labelLink:"Curso de la enfermedad"}
             ]},
             {name:"asintomatico", subitems:[
                 {label:"Infección", color:codigoColor("verde"), pos:0},
                 {label:"Recuperación", color:codigoColor("verde"), pos:1,labelLink:"Sin síntomas (Asintomático)"}
             ]},
             {name:"sintomas leves", subitems:[
                 {label:"Infección", color:codigoColor("verde"), pos:0},
                 {label:"Aparición de síntomas", color:codigoColor("violeta"), pos:0.33,labelLink:"Incubación"},
                 {label:"Recuperación", color:codigoColor("verde"), pos:1,labelLink:"Síntomas leves"}
             ]},
             {name:"internado", subitems:[
                 {label:"Infección", color:codigoColor("verde"), pos:0},
                 {label:"Aparición de síntomas", color:codigoColor("violeta"), pos:0.33,labelLink:"Incubación"},
                 {label:"Internación", color:codigoColor("naranja"), pos:0.66,labelLink:"Síntomas graves"},
                 {label:"Recuperación", color:codigoColor("verde"), pos:1,labelLink:"Asistencia médica"}
             ]},
             {name:"fallecido", subitems:[
                 {label:"Infección", color:codigoColor("verde"), pos:0},
                 {label:"Aparición de síntomas", color:codigoColor("violeta"), pos:0.33,labelLink:"Incubación"},
                 {label:"Internación", color:codigoColor("naranja"), pos:0.66,labelLink:"Síntomas graves"},
                 {label:"Fallecimiento", color:"gray", pos:1,labelLink:"Asistencia médica"}
             ]}
        ];

        casos.forEach((p,ii) => { // agrego la data para las flechas
                
                for (let i = 0; i < p.subitems.length; i++) {
                    if(i<p.subitems.length-1){ // todos menos el ultimo
                    p.subitems[i].flecha = {
                        x0:p.subitems[i].pos*anchoGrafico+padding,
                        x1:p.subitems[i+1].pos*anchoGrafico-padding,
                        label:p.subitems[i+1].labelLink};
                    }
                    p.subitems[i].casoId = ii;
                }
            })

        var titulos = grafico.append("g").attr("id","titulos")
                        .attr("transform", "translate(0," + (margin.top) + ")")
                        .attr("text-anchor","middle")
                        .style("opacity",0);
            titulos.append("text").text("Inicio").attr("x",0);
            titulos.append("text").text("Desenlace").attr("x",anchoGrafico);

        dibujaRenglon(0,height/2,grafico,"g1");
        dibujaRenglon(1,height/5,grafico,"g2");
        dibujaRenglon(2,height*2/5,grafico,"g2");
        dibujaRenglon(3,height*3/5,grafico,"g2 clones"); // este va duplicado
        
        dibujaRenglon(4,height*4/5,grafico,"g2");
            
        var divisionEnAlto = isMobile?7:7.3; // esto es lo que define el alto de los clones
        for (let i = 1; i < 6; i++) {
            if(i!=3) dibujaRenglon(3,height*i/(divisionEnAlto),grafico,"clones"); // este va duplicado
        }

        

        function dibujaRenglon(index,altura,root,clase) {
            const tempRoot = root.append("g").attr("class",clase)
                    .style("opacity",clase=="clones"?0:1)
                    .attr("transform", d => `translate(0,${altura})`);

            const node = tempRoot.append("g")
                    .selectAll("g").attr("class","subitems")
                    .data(casos[index].subitems)
                    .join("g")
                    //.attr("transform", d => `translate(${d.pos*anchoGrafico},0)`)
                    .attr("class",(d,i)=>"bl"+i);

                node.append("use")
                    .attr("xlink:href","#tipito")
                    .attr("x",d=>d.pos*anchoGrafico)
                    .attr("class",(d,i)=>"item tip"+i)
                    .attr("fill",d=>d.color)
                    ;

                node.append("text")
                    .attr("y", height<560?15:18)
                    .attr("x",d=>d.pos*anchoGrafico)
                    .attr("text-anchor", "middle")
                    .attr("class","item labels")
                    .text(d=>d.label)
                    .call(wrap, 100, 1, false)
                    ;
            
                node.filter(d=>d.hasOwnProperty("flecha")).append("path")
                    .attr("class", "item links flechitas")
                    .attr('stroke-width', 1.5)
                    .attr("marker-end","url(#arrow)")
                    .attr("d", d=>d3.line()([[d.flecha.x0,0],[d.flecha.x1,0]]));
        
          if(clase!="clones"){
                node.filter(d=>d.hasOwnProperty("flecha")).append("text")
                    .attr("class","item links texts")
                    .attr("y", -5)
                    .attr("x", d=>{
                        return (d.flecha.x1-d.flecha.x0)/2+d.flecha.x0})
                    .attr("text-anchor", "middle") 
                    .text(d=>d.flecha.label);
                if(isMobile) node.selectAll(".texts").call(wrap, 70, 1,true) ;
                    
                }
                   d3.selectAll(".g2").selectAll(".item").style("opacity",0);
        }

        
            // aca construye el grafico de barras inferior
           
    const dataLine = [[0,0,0],[1,1,0],[1,2,0],[1,3,0],[1,4,0],[1,5,0],[0,6,0],[0,7,0],
                        [0,0,1],[0,1,1],[1,2,1],[1,3,1],[1,4,1],[1,5,1],[1,6,1],[0,7,1],
                        ];


    const xScale = d3.scaleLinear()
      .domain([0,7])
      .range([0, anchoGrafico]);

    const yScale = d3.scaleLinear()
      .domain([0, 3])
      .range([0, height*2/divisionEnAlto]);

    const xAxis = (g) => g
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .attr("id","eje")
      .attr("opacity",0)
      .call(d3.axisBottom(xScale).ticks(8))
      .selectAll(".tick").selectAll("text").remove();

    const line = d3.line()
      //.defined(d => !isNaN(d.value))
      .y(d => yScale(d))
      .x((d,i) => xScale(i));

    const grafLinea = grafico.append('g').attr("id","graficoLinea");

    grafLinea.append('g').call(xAxis)

    grafLinea.append('g').attr("id","barras").selectAll("rect")
      .data(dataLine)
      .join("rect")
        .attr("opacity",0)
        .attr("fill",d=>!d[2]?codigoColor("violeta"):codigoColor("naranja"))
        .attr('x', d => xScale(d[1])-anchoGrafico/64*(isMobile?2:1))
        .attr("y",d=> height - margin.bottom - yScale(d[0]+(d[1]>5?0:d[2])))
        .attr("width", anchoGrafico/32*(isMobile?2:1))
        .attr("height", d=> yScale(d[0]));
     

        grafico
                .append("text")
                .attr("opacity",0)
                .attr("id","tituloGrafico")
                .attr("x",0)
                .attr("y",height*(isMobile?5.5:6)/divisionEnAlto)
                .style("fill","black")
                .style("text-anchor","middle")
                .text("Casos activos");

// INICIA EL SCROLLY

        init()

    var stepPrevio=0;
    function scrollyTelling(step){
        var apagadito = 0.2, angostamiento= 0.43;

        switch (step) {
                case 0:
                d3.selectAll(".g2").selectAll(".item").transition().duration(600).style("opacity",0);
                d3.selectAll(".g1").transition().duration(600).style("opacity",1);
                d3.select("#titulos").transition().duration(600).style("opacity",0);
                break;

                case 1: // aparecer solo los tipitos
                d3.selectAll(".tip0").transition().duration(600).style("opacity",1);
                d3.select("#titulos").transition().duration(600).style("opacity",1);
                d3.selectAll(".g1").transition().duration(600).style("opacity",0);
                break;

                case 2:
                d3.selectAll(".g2").selectAll(".item:not(.tip0)").transition().delay(d=>d.pos*80).duration(600).style("opacity",d=>d.casoId==1?1:0);
                d3.selectAll(".g1").transition().duration(600).style("opacity",0);
                break;

                case 3:
                d3.selectAll(".g2").selectAll(".item:not(.tip0)").transition().delay(d=>d.pos*80).duration(600).style("opacity",d=>d.casoId<=2?1:0);
                d3.selectAll(".g1").transition().duration(600).style("opacity",0);
                break;

                case 4://resaltar sintomaticos

                break;

                case 5: //aparecen los dos hospitalizados
                d3.selectAll(".g2").selectAll(".item").transition().delay(d=>d.pos*80).duration(600).style("opacity",1);
                d3.selectAll(".g1").transition().duration(600).style("opacity",0);
                break;

                case 6://marco todos los del medio
                d3.select("#titulos").transition().duration(600).style("opacity",1);
                d3.selectAll(".g2").transition().duration(600).style("opacity",1);
                d3.selectAll(".g2.clones").transition().delay(301).duration(300)
                                            .attr("transform", d => `translate(0,${height*3/5})`);
                d3.selectAll(".g2").selectAll(".item:not(.links)").transition().duration(600).style("opacity",d=>d.pos>0&&d.pos<1?1:apagadito);
                d3.selectAll(".g2").selectAll(".links").transition().duration(600).style("opacity",apagadito);
                d3.selectAll(".g1").transition().duration(600).style("opacity",0);
                d3.selectAll(".clones:not(.g2)").transition().delay(301).duration(300).style("opacity",0);
                d3.selectAll(".clones").selectAll("use,.labels").transition().delay(301).duration(600)
                                            .attr("font-size","12px")

                                          
                break;

                case 7:// dejo solo el caso 3 y apago el resto y duplico el caso 3

                d3.select("#titulos").transition().duration(300).style("opacity",0);

                d3.selectAll(".g2").selectAll(".item").transition().duration(300).style("opacity",1);
                d3.selectAll(".g2").selectAll(".texts").transition().duration(300).style("opacity",0);

                d3.selectAll(".g2:not(.clones)").transition().duration(300).style("opacity",0);

                d3.selectAll(".clones").selectAll("use,.labels").transition().delay(301).duration(600)
                                            .attr("font-size","9px")
                                            .attr("x",d=>d.pos*anchoGrafico)

                d3.selectAll(".clones").selectAll(".flechitas").transition().delay(301).duration(600)
                                            .attr("d", d=>d3.line()([[d.flecha.x0,0],[d.flecha.x1,0]]));

                d3.select(".g2.clones").transition().delay(301).duration(600)
                                            .style("opacity",1)
                                            .attr("transform", d => `translate(0,${height*3/divisionEnAlto})`);

                d3.selectAll(".clones").transition().delay(902).duration(300).delay((d,i)=>600+(Math.abs(i-2)*140))
                                                .style("opacity",1);

                d3.selectAll(".g1").transition().duration(600).style("opacity",0);

                d3.selectAll(".clones g").transition().delay(301).duration(600)
                            .attr("transform", (d,i) => `translate(0,0)`);

                if(isMobile)  d3.selectAll(".clones").selectAll(".labels").transition().duration(300)
                            .style("opacity",1);    

                break;
                
                case 8:// angosto y distribuyo
                d3.selectAll(".clones").selectAll("use,.labels").transition().duration(600)
                                    .attr("x",d=>d.pos*angostamiento*anchoGrafico);
                                   
                d3.selectAll(".clones").selectAll(".flechitas").transition().duration(600)
                            .attr("d", d=>d3.line()([[d.flecha.x0*angostamiento+padding/2,0],[d.flecha.x1*angostamiento-padding/2,0]]));
                            
                d3.selectAll(".clones>g").transition().duration(600)
                            .attr("transform", (d,i) => `translate(${i*anchoGrafico/7},0)`);
                        
                            d3.selectAll("#eje, #tituloGrafico").transition().duration(300)
                            .style("opacity",0);
                
                d3.selectAll("#barras").selectAll("rect").transition().duration(300)
                            .style("opacity",0);    
                if(isMobile)  d3.selectAll(".clones").selectAll(".labels").transition().duration(300)
                            .style("opacity",0);    
                break;
                
                case 9://

                d3.selectAll("#eje, #tituloGrafico").transition().delay(600).duration(300)
                            .style("opacity",1);
                
                d3.selectAll("#barras").selectAll("rect").transition().delay(d=>800+d[1]*100).duration(300)
                            .style("opacity",1);
                break;

                case 10://
                break;
            }


            stepPrevio = step;
        }
            

    

});


function wrap(text, width, dy, alignBottom) {
  text.each(function() {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 1,
        lineHeight = dy, // ems
        y = text.attr("y"),
        clase = text.attr("class"),
        x = parseFloat(text.attr("x")),
        tspan = text.text(null).append("tspan").attr("x", 0)
                    .attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "))
            .attr("x", x).attr("class",clase);
      if (tspan.node().getComputedTextLength() > width) {
        lineNumber++;

        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan")
                .attr("x", x)
                .attr("dy", dy + "em").text(word).attr("class",clase);
      }
    }
    if(alignBottom) d3.select(this).attr("y",y-lineNumber*10-5)
  });
}

</script>


<div class="note info"><p>Ahora que conocemos mejor cómo se comporta esta enfermedad y cuál es su historia, podemos tener una visión más amplia de lo que está pasando. Así, vemos que en una población conviven al mismo tiempo varios subgrupos muy distintos en cuanto a la probabilidad de ser testeado y detectado, a la capacidad de transmitir o no el virus, a la posibilidad de requerir o no internación o respirador, etc.</p>
<img src="/images/historiaDeUnCaso_venn.png" class="imgDesktop">
<img src="/images/historiaDeUnCaso_venn_mobile.png" class="imgMobile">

<p>Entender qué subgrupo es el que conforma, por ejemplo, el número total de casos o el número de casos activos es uno de los primeros pasos para interpretar correctamente las noticias.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿En qué países murieron más personas por COVID-19?</title>
    <url>/covid/muertes_por_pais/</url>
    <content><![CDATA[


<style>



  
    svg text{
            font-size: 11px;
        }


     text.titulo{
            font-size: 12px;
            fill:#555;
        }

    #scatterPlot text{
            font-size: 11px;
            fill:#222;
        }


    #scatterPlot .tick text{
        font-size: 11px;
            fill:#777;
    }

    .axis .domain{
        stroke: #777;
    }
    .boxGroup .lineaBox{
        fill:none;
        stroke:#F26522;
        stroke-width: 3px;
        stroke-linecap: round;
    }

    

    #rankPob .boxGroup .lineaBox{
        stroke:#4e79a7;
    }

    #rankMuertesRel .boxGroup .lineaBox{
        stroke:#db7d66;
    }


    .boxGroup .box{
        fill:rgb(219, 219, 219);
        /* stroke-width: 1px; */
    }
    
    .boxGroup tspan{
        font-variant-numeric: lining-nums;
    }

    .boxGroup tspan.numero{
        /* font-weight: 100; */
         fill: rgb(97, 97, 97);
    }


    .links path{
        fill:none;
        stroke-width: 2px;
        stroke: rgb(195, 195, 195);
    }

    .tendencia{
        fill:none;
        stroke-width: 2px;
        stroke: rgb(231, 61, 61);
    }

    .slopeLinea{
        fill:none;
        stroke-width: 1px;
        stroke: rgba(117, 117, 117, 0.39);
    }

   /*  .puntos{
        fill: #F26522;

    } */


    .label.naranja{
        background: #F26522;

    }
    .label.naranjaclaro{
        background: #db7d66;

    }
    .label.celeste{
        background: #5badd4;

    }
    
    

   

    
    .label.azul{
        background: #4e79a7;

    }


    .label.violeta{
        background: #8B6BAF;

    }
    
    .epigrafe{
            margin-top: 5px;
                }

    .textoPais.arg{
        text-shadow:
            -3px -3px 0 #f1f1f1,  
            3px -3px 0 #f1f1f1,
            -3px  3px 0 #f1f1f1,
            3px  3px 0 #f1f1f1;
    }

    .noRanking rect {
            fill: none !important;
            stroke: silver;
            stroke-width: 2px;
        }

        
    .argBox .textoPais{
        fill:#1e8bbf;
        font-weight: 500;
    }

    .argBox .numero {
        fill: rgb(202, 202, 202);
        }


    @media only screen and (min-width: 768px) {
    
        text.titulo{
            font-size: 14px;
        }

        svg text{
            font-size: 12px;
        }
        .epigrafe{
            margin-top: 5px;
                }


        
    }
    
</style>


<section id='scrolly'>
    <div class='scrolly'>
        

        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="contenedorGrafico" class='sticky' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p> La <mark class="label naranja">cantidad de muertes totales</mark> y por <mark class="label naranjaclaro">millón de habitantes</mark> en todo el mundo por COVID-19 son cifras con las que nos cruzamos a diario.
                    <br/><br/>
                    Este es el ranking de los  países según ambos datos.
                    <br/><br/>
                    ¿Sirven estos números para comparar el impacto de la pandemia entre los distintos países? ¿Cuál conviene mirar?
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    <b>Comparar</b> entre países <b>no es tan fácil</b> como parece.
                    <br/><br/>
                    Podríamos comparar el número de casos confirmados. Pero, como vimos en <a href="/covid/la_cantidad_de_contagiados/">¿Cuántos contagiados hay realmente?</a>, la decisión sobre a qué personas testear puede ser distinta en cada país y, además, cambiar en el tiempo.
                    <br/><br/>
                    No sería una comparación correcta y puede ser engañosa.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    En cambio, el número de fallecimientos es una medida un poco más confiable.
                    <br/><br/>
                    Un fallecimiento por COVID-19 no depende, por ejemplo, de cuántos testeos decida hacer el país o de la definición de caso sospechoso. Depende menos de las decisiones que cada país tome.
                </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    Pero, incluso cuando elegimos un indicador bueno, puede haber otros factores que hagan difícil la comparación.
                    <br/><br/>
                    Por ejemplo, los países tienen <mark class="label azul">poblaciones</mark> muy diferentes. ¿Importa eso para esta comparación?
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    En este gráfico comparamos el <mark class="label naranja">número de fallecimientos por COVID-19</mark> con la población al <b>31 de julio de 2020</b>. Cada punto corresponde a un país
                    <br/><br/>
                    Ambos ejes están en escala logarítmica que, como <a href="/covid/el_ritmo_de_la_pandemia/">vimos acá</a>, permite graficar números chicos y grandes a la vez.
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Se ve que hay una tendencia: todos los puntos se acomodan como en diagonal.
                <br/><br/>
                Esto quiere decir que, cuantos más habitantes tiene un país, mayor es su número de muertes por COVID-19.
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Esta relación puede resultar intuitiva o no tanto, pero es claro que <b>no es justo comparar</b> la situación de un país grande y uno chico <b>mirando el número absoluto</b> de muertes.
                    <br/><br/>
                    El país chico tiene todas las de ganar en esta comparación: tiene menos muertes simplemente porque tiene menos población.
                </p>
            </div>
            <div class='step' data-index='7'>
                <p>
                    Entonces, para comparar entre distintos países, nos conviene ver cuántas personas fallecidas hay en relación al tamaño de su población.
                    <br/><br/>
                    Por ello, uno de los indicadores que usamos es el de  <mark class="label naranjaclaro">muertes por millón de habitantes</mark>. Por cada millón de personas que viven en ese país, cuántas personas murieron.
                </p>
            </div>
            <div class='step' data-index='8'>
                 <p>
                    Al incorporar la información del tamaño de la población (fallecimientos por millón de habitantes) el ranking de países se modifica, y la comparación entre países es más acertada.
                </p>
            </div>

         
        </article>


    </div>

</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/I8_normalizacion_fallecimientos.csv"),
    d3.csv("https://datos.decodificar.org/I8_normalizacion_fallecimientos_regresion.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")
]).then(function(files) {

   
    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="I8");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
       


    var paisesSelect  = ["ARG", "PER", "CHI","BOL", "BRA", "MEX", "USA", "CHI", "RUS", "IND", "ITA", "ESP", "NZL", "URY", "CHN", "PRY"]

    var datos = files[0].map(obj => {
					return {
						"id":obj.iso_code,
						"pais":[obj.location,obj.pais_corto],
                        "poblacion":+obj.population,
                        "muertes":+obj.total_deaths,
                        "muertesRel":+obj.total_deaths/+obj.population*1000000,
                        "muertesScatter":+obj.total_deaths_july,
                        "figuraEnScatter":paisesSelect.find(d=>d==obj.iso_code)
					}});


                    datos = datos.filter(d=>d.poblacion>100000);


        //agrega los rankings
        datos.sort((a, b) => d3.descending(a.muertes, b.muertes))
            .forEach((e,i) => {
                e.rankingMuertes = i+1;
            });

        datos.sort((a, b) => d3.descending(a.muertesRel, b.muertesRel))
            .forEach((e,i) => {
                e.rankingMuertesRel = i+1;
            });

        datos.sort((a, b) => d3.descending(a.poblacion, b.poblacion))
            .forEach((e,i) => {
                e.rankingPob = i+1;
            });
    // **** CODIGO DEL SCROLLY *******

    const container = d3.select('#scrolly'); //busco el container total
    const stepSel = container.selectAll('.step'); // selecciono los "steps"

    function updateChart(index) {  // funcion que llama cada vez que cruza un humbral
        const sel = container.select(`[data-index='${index}']`);
        stepSel.classed('is-active', (d, i) => i === index);
        
        scrollyTelling(index); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init() { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: stepSel.nodes(),
            offset: 0,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index);
            }
        });
    }
 

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo


var svg = d3.select("#contenedorGrafico").append("svg"),
    margin = isMobile ? {top: 15, right: 10, bottom: 5, left: 10} : {top: 25, right: 30, bottom: 10, left: 30},
    width =  +d3.select('#contenedorGrafico').style('width').slice(0, -2),
    height = +d3.select('#contenedorGrafico').style('height').slice(0, -2)- (isMobile?45:35);

    d3.select("#contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente)
            ;


    if (!isMobile && height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

var grafico = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    ;

    var anchografico = width;
    var marginBox =10;
    
    var x = d3.scaleBand()
                    .domain([0,1])
                    .range([0,anchografico])
                    .paddingInner(0.3)
                    .paddingOuter(0)
                    .align(0.5)
                    .round(true);

    
    const xLine = d3.scaleLinear()
            .range([marginBox+1, x.bandwidth()-marginBox-1]);


            
    const xScatter = d3.scaleLog()
            .domain([95000,d3.max(datos.filter(d=>d.muertesScatter),d=>d.poblacion)])
            .range([width*0.05,width*0.95]);

            if(isMobile) xScatter.range([width*0.15,width*0.85]);

            
    const yScatter = d3.scaleLog()
            .domain(d3.extent(datos.filter(d=>d.muertesScatter) ,d=>d.muertesScatter))
            .range([height*0.95,height*0.05]);

            if(isMobile) yScatter.range([height*0.95,height*0.05]);

    var yAxis = d3.axisLeft(yScatter);
        yAxis.ticks(4).tickFormat(d3.format(",.0s"));

    var xAxis = d3.axisBottom(xScatter);
        xAxis.ticks(4).tickFormat(d3.format(",.0s"));

    const ySlope = d3.scaleLinear()
            .domain(d3.extent(datos,d=>d.muertes))
            .range([height,isMobile?40:30]);

    const ySlopeRel = d3.scaleLinear()
            .domain(d3.extent(datos,d=>d.muertesRel))
            .range([height,isMobile?40:30]);

    

    var y = d3.scaleBand()
                    .domain(d3.range(1,11))
                    .range([20,height])
                    .paddingInner(isMobile?0.12:0.2)
                    .paddingOuter(0)
                    .align(0.5)
                    .round(true);

    var diagonal = d3.linkHorizontal()
                    .x(d => d.x)
                    .y(d => d.y);


                armaRanking(datos,"rankingMuertes","muertes",10,0, "rankMuertes", "Muertes totales");

                armaRanking(datos,"rankingMuertesRel","muertesRel",10,1, "rankMuertesRel", isMobile?"Muertes x mill. hab.":"Muertes por millón de hab.");

                armaRanking(datos,"rankingPob","poblacion",10,1, "rankPob", "Población");

                armaConexion("#rankMuertes","#rankMuertesRel",1);
                armaConexion("#rankMuertes","#rankPob",0);


                d3.select("#rankPob").selectAll(".titulo, .boxGroup").style("opacity",0)
        

                // DIBUJO EL SCATTER PLOT
                var scatterPlot = grafico.append("g").attr("id","scatterPlot");

                scatterPlot.append("path").attr("class","tendencia").style("opacity",0)
                                .attr("d",d3.line()([[xScatter(100000),yScatter(1)],[xScatter(10000000000),yScatter(198000)]]));
                            

                var scatterGroups = scatterPlot.selectAll("g")
                        .data(datos.filter(d=>d.muertesScatter))
                        .join("g")
                        .attr("transform", d => `translate(${xScatter(d.poblacion)},${yScatter(d.muertesScatter)})`);
                        ;

                        scatterGroups.append("circle")
                            .attr("class","puntos").style("opacity",0)
                            .attr("fill",d=>d.figuraEnScatter?d.figuraEnScatter=="ARG"?"#5badd4":"#F26522":"#CCC")
                            .attr("r", d=>d.figuraEnScatter?4:2)
                       ;

                       scatterGroups.filter(d=>d.figuraEnScatter).append("text").style("opacity",0)
                                            .text(d=>isMobile?d.id:d.pais[1]).attr("dx",5).attr("dy",5);

                                scatterPlot.append("g").attr("class","axis").call(xAxis)
                                        .attr("transform",`translate(0,${height-(isMobile?20:10)})`).style("opacity",0);
                                scatterPlot.append("g").attr("class","axis").call(yAxis)
                                        .attr("transform",`translate(${isMobile?30:15},0)`).style("opacity",0);

                                scatterPlot.selectAll(".tick").selectAll("line").remove();
                                scatterPlot.select(".tick").select("text").text("Población:").attr("text-anchor","start");
                     

                // DIBUJO EL SLOPECHART
                var slopeChart = grafico.append("g").attr("id","slopeChart");
                
                for (let i = 0; i < 2; i++) {
                    var rank = ["rankingMuertes","rankingMuertesRel"];

                    slopeChart.append("g").attr("id","columna"+i).selectAll("circle")
                        .data(datos)
                        .join("circle")
                            .attr("class","puntos")
                            .style("opacity",0)
                            .attr("fill",d=>d.figuraEnScatter=="ARG"?"#5badd4":d[rank[i]]<11?"#F26522":"#88888840")
                            .attr("cx", d => !i?(x(i)+x.bandwidth()):x(i))
                            .attr("cy", d => !i?ySlope(d.muertes):ySlopeRel(d.muertesRel))
                            .attr("r", d=>d[rank[i]]<11?4:d.figuraEnScatter=="ARG"?4:2)
                            ;
                 
                }

                slopeChart.append("g").attr("id","lineas").selectAll("path")
                        .data(datos.filter(d=>d.rankingMuertes<11 ||d.rankingMuertesRel<11 || d.id=="ARG"))
                        .join("path")
                            .attr("class","slopeLinea")
                            .style("opacity",0)
                            .attr("d", d => d3.line()([[x(0)+x.bandwidth(),ySlope(d.muertes)],[x(1),ySlopeRel(d.muertesRel)]]));

                            // dibuja el ARG en el medio
                /* slopeChart.append("text").style("text-anchor","middle").attr("class", "textoPais arg")
                            .text("ARG")
                            .style("opacity",0)
                            .attr("x",width/2)
                            .attr("dy",3)
                            .style("fill","#5badd4")
                            .attr("y",(ySlope(datos.filter(d=>d.id=="ARG")[0].muertes)-ySlopeRel(datos.filter(d=>d.id=="ARG")[0].muertesRel))/2+ySlopeRel(datos.filter(d=>d.id=="ARG")[0].muertesRel)); */


    function armaRanking(dataOrig, variableOrden, variableMuestra, top, columna, id, titulo) {
        
        data = dataOrig.sort((a, b) => d3.ascending(a[variableOrden], b[variableOrden]))
                .filter(d=>d[variableOrden]<11)

        var ordenOriginal=0;
        if(!data.filter(d=>d.id == "ARG")[0]){ // Si argentina NO ESTA en el ranking, la agrega
            data.pop();
            data.push(dataOrig.filter(d=>d.id == "ARG")[0]);
            ordenOriginal=data[data.length-1][variableOrden];
            data[data.length-1][variableOrden]=10;
        }
        

        data.forEach(element => {
            element.labelY = 10;
            if(variableMuestra=="muertes") element.labelY = ySlope(element.muertes);
            if(variableMuestra=="muertesRel") element.labelY = ySlopeRel(element.muertesRel);
        });

       relax(data, 11, height); // Separa los labels para que no se pisen
        
       data.forEach(element => {
            if(variableMuestra=="muertes") element.labelYmuertes = element.labelY;
            if(variableMuestra=="muertesRel") element.labelYmuertesRel = element.labelY;;
        });

        
        xLine.domain([0,d3.max(data,d=>d[variableMuestra])]);

        const tabs = grafico.append("g").attr("id",id);
    
        var texto = tabs.append("text")
                        .attr("class","titulo")
                        .attr("x",marginBox+x(columna))
                        .attr("y",14)
                        .text(titulo);

        var cards = tabs.selectAll("g")
                        .data(data)
                        .join("g")
                            .attr("class",d=>"boxGroup" + (d.id=="ARG"?" argBox":"") + (d.id=="ARG"&&ordenOriginal?" noRanking":""))
                            .attr("transform", d => `translate(${x(columna)},${y(+d[variableOrden])})`);
                  
        var box = cards.append("rect")
                                .attr("width",x.bandwidth())
                                .attr("height",y.bandwidth())
                                .attr("rx",4)
                                .attr("class","box")
                                ;

                             
        var texto = cards.append("text")
                                .attr("x",marginBox)
                                .attr("y",y.bandwidth()/2+(isMobile?-5:2));

                    texto.append("tspan")
                            .attr("class","textoPais")
                            .text(d=>(ordenOriginal&&d.id=="ARG"?ordenOriginal:d[variableOrden])+". " + d.pais[isMobile]); // si es argentina y no esta en el ranking pone el indice original (no el 10)

        var numero = texto.append("tspan").attr("class","numero")
                            .text(d=>(isMobile?"":": ")+d3.format(",.0f")(d[variableMuestra]))
                        ;

                    if(isMobile) numero.attr("x",marginBox).attr("dy",y.bandwidth()/2.2);

                    cards.append("path") // AGREGO LA LINEA DE POBLACION DEBAJO DE LOS PAISES
                            .attr("d",d=>d3.line()([[xLine(0),0],[xLine(d[variableMuestra]),0]]))
                            .attr("class","lineaBox")
                            .attr("transform", d => `translate(0,${(y.bandwidth()/2)+(isMobile?1:9)})`);
                        ;
                    cards.append("circle") // AGREGO LA LINEA DE POBLACION DEBAJO DE LOS PAISES
                            .attr("d",d=>d3.line()([[xLine(0),0],[xLine(d[variableMuestra]),0]]))
                            .attr("r",1.5)
                            .attr("class","lineaBox marker")
                            .attr("transform", d => `translate(${xLine(d[variableMuestra])},${(y.bandwidth()/2)+(isMobile?1:9)})`);
                        ;
       
        
                }


    function armaConexion(origen, destino, prendido) {
            var sources = d3.select(origen).selectAll(".boxGroup");
            var targets = d3.select(destino).selectAll(".boxGroup");


            sources.each(function (d) {
                var esto = this;
                if(targets.filter(e=>e.id==d.id)._groups[0].length){
                    d3.select(destino).append("g").attr("class","links").style("opacity",prendido)
                                    .append("path")
                                        .attr("d", f => {
                                            var targetBox = getTranslateXY(targets.filter(e=>e.id==d.id));
                                            var sourceBox = getTranslateXY(d3.select(esto));
                                                                                      
                                        return diagonal({
                                                    source: {x: (sourceBox[0]+x.bandwidth()), y: (sourceBox[1]+y.bandwidth()/2)},
                                                    target: {x: targetBox[0], y: (targetBox[1]+y.bandwidth()/2)}
                                            });
                                        });
                
                }
                
               ;
            })

    }


// INICIA EL SCROLLY

        init()



    function scrollyTelling(step){

        switch (step) {
            case 2:
                d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>40*i).duration(300).style("opacity",0)
                d3.select("#rankMuertesRel").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>200+40*i).duration(400).style("opacity",1)
                break;

            case 3:
            d3.select("#rankMuertes").select(".titulo").text("Muertes totales");
                d3.select("#rankMuertesRel").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>40*i).duration(300).style("opacity",0)
                d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>100+40*i).duration(400).style("opacity",1)
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().delay((d,i)=>60*i).duration(300).style("opacity",1);
                d3.select("#scatterPlot").selectAll(".puntos,text,.axis").transition().duration(50).style("opacity",0);
                d3.select("#contenedorGrafico").select("div").html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente)
                break;

            case 4: // pasa a scatterplot
            d3.select("#rankMuertes").select(".titulo").text("Muertes totales (al 31/jul/20)");
            d3.select("#contenedorGrafico").select("div").html("www.decodificar.org - "+epigrafeData[1].fecha+" - Fuente: "+ epigrafeData[1].fuente)
            d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>10*i).duration(100).style("opacity",0);
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().delay((d,i)=>15*i).duration(100).style("opacity",0);
                d3.select("#scatterPlot").selectAll(".puntos,text,.axis").transition().delay((d,i)=>i).duration(50).style("opacity",1);
                d3.select("#scatterPlot").selectAll(".tendencia").transition().duration(50).style("opacity",0);
                break;

            case 5: // mustra tendencia
            d3.select("#contenedorGrafico").select("div").html("www.decodificar.org - "+epigrafeData[1].fecha+" - Fuente: "+ epigrafeData[1].fuente)
                d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>10*i).duration(100).style("opacity",0);
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().delay((d,i)=>15*i).duration(100).style("opacity",0);
                d3.select("#scatterPlot").selectAll(".puntos,text,.axis").transition().delay((d,i)=>i).duration(50).style("opacity",1);
                d3.select("#scatterPlot").selectAll(".tendencia").transition().duration(150).style("opacity",1);
                break;


            case 6:
                d3.select("#rankMuertes").select(".titulo").text("Muertes totales");
                d3.select("#contenedorGrafico").select("div").html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente)
                d3.select("#scatterPlot").selectAll(".tendencia").transition().duration(50).style("opacity",0);
                d3.select("#scatterPlot").selectAll(".puntos,text,.axis").transition().duration(100).style("opacity",0);
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().delay((d,i)=>20*i).duration(200).style("opacity",1);
                d3.select("#rankMuertesRel").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>20*i).duration(200).style("opacity",0)
                d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>20*i).duration(200).style("opacity",1)
                break;

            case 7:
                d3.select("#rankPob").selectAll(".titulo, .links, .boxGroup").transition().delay((d,i)=>50*i).duration(300).style("opacity",0)
                d3.select("#rankMuertes").selectAll(".titulo, .links, .box, .numero, .lineaBox").transition().delay((d,i)=>15*i).duration(100).style("opacity",1);
                d3.select("#rankMuertesRel").selectAll(".titulo, .links, .box, .numero, .lineaBox").transition().delay((d,i)=>15*i).duration(100).style("opacity",1);
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().duration(400)
                                            .attr("transform", d => `translate(${x(0)},${y(+d.rankingMuertes)})`);
                d3.select("#rankMuertesRel").selectAll(".boxGroup").transition().duration(400)
                                            .style("opacity",1)
                                            .attr("transform", d => `translate(${x(1)},${y(+d.rankingMuertesRel)})`);
                d3.select("#slopeChart").selectAll(".puntos, .slopeLinea, .arg").transition().duration(100).style("opacity",0);
                d3.select("#rankMuertes").selectAll(".textoPais").transition().delay(50).duration(100).style("text-anchor","start");
                break;
        
            case 8:
                d3.select("#rankMuertes").selectAll(".links, .box, .numero, .lineaBox").transition().delay((d,i)=>15*i).duration(100).style("opacity",0);
                d3.select("#rankMuertesRel").selectAll(".links, .box, .numero, .lineaBox").transition().delay((d,i)=>15*i).duration(100).style("opacity",0);
                d3.select("#rankMuertes").selectAll(".boxGroup").transition().duration(400)
                                            .attr("transform", d => `translate(${x(0)+x.bandwidth()*(isMobile?0.85:1.1)},${(d.labelYmuertes-y.bandwidth()/2*(isMobile?0.6:1))})`);
                d3.select("#rankMuertesRel").selectAll(".boxGroup").transition().duration(400)
                                            .attr("transform", d => `translate(${x(1)},${(d.labelYmuertesRel-y.bandwidth()/2*(isMobile?0.6:1))})`);
                d3.select("#slopeChart").selectAll(".puntos, .slopeLinea, .arg").transition().duration(200).style("opacity",1);
                d3.select("#rankMuertes").selectAll(".textoPais").transition().delay(50).style("text-anchor","end");
                
                
                break;
            

                
            }
        }
            

    

});

function getTranslateXY(item) {
    var itemTrans = item.attr("transform");
    var translate = itemTrans.substring(itemTrans.indexOf("(")+1, itemTrans.indexOf(")")).split(",");
    return [+translate[0],+translate[1]]
}

// separa en el eje Y los datos que le lleguen con formato: 
// d.name // d.labelY // d.values
function relax(dataInterna, spacing, height) {
				spacing = spacing? spacing : 8;
				var dy = 1;
				var repeat = false;
				var count = 0;
				dataInterna.forEach(function(dA, i) {
					var yA = dA.labelY;
					dataInterna.forEach(function(dB, j) {
						var yB = dB.labelY;
						if (i === j) {
							return;
						}
						diff = yA - yB;
						if (Math.abs(diff) > spacing) {
							return;
						}
						repeat = true;
						magnitude = diff > 0 ? 1 : -1;
						adjust = magnitude * dy;
						dA.labelY = +yA + adjust;
						dB.labelY = +yB - adjust;
						dB.labelY = dB.labelY > height ? height : dB.labelY
						dA.labelY = dA.labelY > height ? height : dA.labelY
					})
				})
				if (repeat) {
					relax(dataInterna, spacing);
				}
            }
            
function wrap(text, width, dy, alignBottom) {
  text.each(function() {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 1,
        lineHeight = dy, // ems
        y = text.attr("y"),
        clase = text.attr("class"),
        x = parseFloat(text.attr("x")),
        tspan = text.text(null).append("tspan").attr("x", 0)
                    .attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "))
            .attr("x", x).attr("class",clase);
      if (tspan.node().getComputedTextLength() > width) {
        lineNumber++;

        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan")
                .attr("x", x)
                .attr("dy", dy + "em").text(word).attr("class",clase);
      }
    }
    if(alignBottom) d3.select(this).attr("y",y-lineNumber*10-5)
  });
}

</script>


<div class="note info"><p>Ajustar por tamaño de población (es decir, mirar el dato por millón de habitantes) nos permite hacer comparaciones más correctas entre países que tienen diferente tamaño.</p>
<p>Otra corrección posible es la de comparar sólo entre países que se encuentren en etapas similares de la pandemia (por ejemplo, que hayan encontrado el pico). Puede haber aún más factores escondidos: densidad habitacional, condiciones sanitarias, edad de la población, riqueza del país, etc. Tener en cuenta estos factores nos ayuda a hacer comparaciones cada vez mejores.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿Qué nos dice el número de fallecimientos?</title>
    <url>/covid/numero_de_fallecimientos/</url>
    <content><![CDATA[


<style>

    .nada{
        fill:#4e79a7;
        fill:#f28e2c;
        fill:#e15759;
        fill:#76b7b2;
        fill:#59a14f;
        fill:#af7aa1;
        fill:#ff9da7;
        fill:#9c755f;
        fill:#8a7e78;

    }

    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }

    
    text.titulo {
            font-size: 12px;
            fill: #444;
        }


    #ejeY,#ejeY  .tick text{
        fill:#00468B;

    }
    #ejeYder, #ejeYder .tick text{
        fill:#F26522;
    }

    .axis-title {
        font-size: 11px;
        text-anchor: start;
    }
    
    .axis-title.der{
        text-anchor: end;
    }

    .linea {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 2px;
    }


    .label.naranja{
        background: #F26522;

    }

    .label.azul{
        background: #00468B;
        color:white;

    }

    .label.rebrote{
        background: #f28e2c;
        

    }

    


    @media only screen and (min-width: 768px) {
  
        text.titulo {
            font-size: 14px;
            fill: #444;
        }
    }
    
</style>


<section id='scrolly1'>
    <div class='scrolly'>
        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico1" class='sticky contenedorGrafico' >
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>Venimos viendo este gráfico hace bastante tiempo. Sí, es el de número de casos nuevos confirmados por día en Argentina (promedio de los últimos 7 días). Nos interesa mirar <b>este rango de tiempo en especial.</b>
                    <br/><br/>
                    ¿Qué pasa si a este mismo gráfico le agregamos <b>la curva de fallecimientos</b> por COVID-19 por día en Argentina?
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    ¿Por qué queremos analizar al mismo tiempo el <mark class="label naranja">número de fallecimientos por COVID-19</mark>? Este dato también es muy importante para evaluar el desarrollo de la pandemia. 
                    <br/><br/>
                    Comparado con el <mark class="label azul">número de casos confirmados</mark>, el dato de fallecimientos <b>depende en menor medida</b> de criterios médicos o epidemiológicos o decisiones políticas y, por lo tanto, vamos a considerarlo un mejor indicador ("proxy") que el número de casos confirmados.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Una diferencia, por ejemplo, es que el <mark class="label azul">número de casos confirmados</mark> depende de la cantidad de tests que hagamos o de la definición de “caso sospechoso”, y ambos criterios van cambiando a lo largo de la pandemia. 
                    <br/><br/>
                    <mark class="label naranja">El número de fallecimientos</mark>, en cambio, no depende de dichos criterios. Una persona fallecida, además, debe ser registrada oficialmente frente a los organismos correspondientes.
                       </p>
            </div>
            <div class='step' data-index='3'>
                <p>
                    Pero… hay un problema: <mark class="label naranja">la curva de fallecimientos</mark> casi no se ve, porque la cantidad de casos nuevos y la de fallecimientos diarios son números que están bastante alejados uno del otro en Argentina. Por ejemplo, cuando los casos nuevos subieron por encima de 1000, el número de fallecimientos era de pocas decenas.
                    <br/><br/>
                    ¿Qué podemos hacer para apreciar curvas de valores tan disímiles en un mismo gráfico?
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    Empezamos cambiando la escala del eje vertical (logarítmica) para evidenciar <a href="/covid/el_ritmo_de_la_pandemia/">el ritmo al cual crecen las curvas.</a>
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Luego le damos un eje propio a cada dato: ponemos el <mark class="label azul">número de casos a la izquierda</mark> y el <mark class="label naranja">número de fallecimientos a la derecha</mark>, eligiendo astutamente los rangos de cada eje.
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Comparemos entonces estas curvas. Lo primero que observamos es que ambas crecen; ambas tienen un "codo" bien marcado; ambas tienen ritmo similar… 
                    <br/><br/>
                    Salvo pequeñas diferencias en los detalles, y la diferencia de que hay más casos confirmados que fallecimientos, podemos decir que a grandes rasgos ¡son muy parecidas!
                </p>
            </div>
            <div class='step' data-index='7'>
                <p>
                    Lo que observamos es que entre la curva de casos nuevos y la de fallecimientos hay una diferencia aproximada de 12 días. 
                    <br/><br/>
                    Decimos que la curva de fallecimientos está "retrasada" con respecto a la de casos nuevos. Esta similitud se ve al correr la curva de casos nuevos 12 días a la derecha.
                    <br/><br/>
					<img src="/images/e5_tiempos_arg.png">
                </p>
            </div>
            <div class='step' data-index='8'>
                <p>
                    Este retraso tiene sentido. En el <a href="/covid/historia_de_un_caso/">curso de esta enfermedad</a>, hay muchos tiempos involucrados: comienza con el contagio, luego hay un período de varios días sin síntomas, después se realiza un test cuyo resultado también tarda varios días, y luego el curso normal de la enfermedad que después de algunos días más puede terminar en la recuperación o en un fallecimiento.
                </p>
            </div>
            <div class='step' data-index='9'>
                <p>
                    Sin embargo, este retraso entre el número de fallecimientos y el de casos confirmados no es el mismo en todos los países. 
                    <br/><br/>
                    Las diferencias principales son las estrategias de testeo y el tiempo que pasa entre encontrar un caso sospechoso y su eventual confirmación por test.
                </p>
            </div>
        </article>
    </div>
</section>

<section id='scrolly2'>
    <div class='scrolly'>
                    <!-- aca va el grafico que va a quedar fijo -->
                    <figure id="grafico2" class='sticky contenedorGrafico' >
                    </figure>

        <!-- acá van los textos de cada paso -->
        <article>
                    
            <div class='step' data-index='0'>
                <p>
                    El efecto del retraso entre casos confirmados y fallecimientos se ve aún más claro en los países que lograron encontrar el famoso "pico".
                    <br/><br/>
                    Miremos <b>Alemania</b>, por ejemplo, con un retraso de 15 días. Los resultados de los testeos se tienen muy pronto en comparación con otros países.
                    <br/><br/>
					<img src="/images/e5_tiempos_alem.png">
                </p>
            </div>
        </article>
    </div>
</section>

<section id='scrolly3'>
    <div class='scrolly'>
                    <!-- aca va el grafico que va a quedar fijo -->
                    <figure id="grafico3" class='sticky contenedorGrafico' >
                    </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    En <b>España</b> el retraso aproximado entre la curva de casos confirmados y la de fallecimientos es de apenas 6 días. Es decir, la confirmación de casos se da bastante más tarde que en otros países.
                    <br/><br/>
					<img src="/images/e5_tiempos_esp.png">
                </p>
            </div>
            <div class='step' data-index='1'>
                <p>
                    Pero entonces, ¿qué ventaja tiene mirar la curva de fallecimientos? ¿Nos dice algo diferente que la de casos confirmados?
                </p>
            </div>
        </article>
    </div>
</section>

<section id='scrolly4'>
    <div class='scrolly'>
                    <!-- aca va el grafico que va a quedar fijo -->
                    <figure id="grafico4" class='sticky contenedorGrafico' >
                    </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    Miremos el caso de <b>Israel</b>, que luego de haber encontrado el pico <mark class="label rebrote">tuvo un rebrote</mark>. En el rebrote la curva de <mark class="label azul">casos nuevos</mark> crece muy rápido y llega a valores más altos que antes, mientras que la de <mark class="label naranja">fallecimientos</mark> no.
                    <br/><br/>
					<img src="/images/e5_tiempos_isr.png">
                </p>
            </div>
            <div class='step' data-index='1'>
                <p>
                    Esto probablemente se deba a un simple aumento en el número de testeos, lo que produce un aumento en los casos confirmados pero no en los fallecimientos. 
                    <br/><br/>
                    Basados en el número de fallecimientos, podríamos decir que <mark class="label rebrote">el rebrote</mark> en realidad es similar a la primera ola de contagios.
                </p>
            </div>
        </article>
    </div>
</section>

<section id='scrolly5'>
    <div class='scrolly'>
                    <!-- aca va el grafico que va a quedar fijo -->
                    <figure id="grafico5" class='sticky contenedorGrafico' >
                    </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    En cambio, en el caso de <b>Australia</b> el <mark class="label naranja">número de fallecimientos</mark> durante <mark class="label rebrote">el rebrote</mark> crece más rápido que el de <mark class="label azul">casos nuevos confirmados.</mark> Esto podría indicar varias posibles causas, por ejemplo que el virus se está expandiendo en una población más vulnerable como las personas mayores.
                    <br/><br/>
					<img src="/images/e5_tiempos_aus.png">
                </p>
            </div>

        </article>


    </div>

</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/E4_num_fallecimientos.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {

  var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="E5");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });

    // **** CODIGO DEL SCROLLY *******


    const container1 = d3.select('#scrolly1'); //busco el container total
	const container2 = d3.select('#scrolly2'); //busco el container total
    const container3 = d3.select('#scrolly3'); //busco el container total
    const container4 = d3.select('#scrolly4'); //busco el container total
    const container5 = d3.select('#scrolly5'); //busco el container total

    const stepSel1 = container1.selectAll('.step'); // selecciono los "steps"
	const stepSel2 = container2.selectAll('.step'); // selecciono los "steps"
    const stepSel3 = container3.selectAll('.step'); // selecciono los "steps"
	const stepSel4 = container4.selectAll('.step'); // selecciono los "steps"
    const stepSel5 = container5.selectAll('.step'); // selecciono los "steps"

    function updateChart(index, what,containerNumber,entra) {  // funcion que llama cada vez que cruza un umbral
        const sel = d3.select('#scrolly'+containerNumber).select(`[data-index='${index}']`);
        what.classed('is-active', (d, i) => i === index);
        scrollyTelling(containerNumber,index,entra); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init(what,containerNumber) { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: what.nodes(),
            offset: 0.5,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index,what,containerNumber,1);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index,what,containerNumber,0);
            }
        });
    }
  

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, ejeX, tituloY, minDate, maxDate, line;


var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var flechitaPath = 'M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z';



var svg = d3.selectAll(".contenedorGrafico").append("svg"),
    margin = isMobile ? {top: 55, right: 20, bottom: 35, left: 20} : {top: 70, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#grafico1').style('width').slice(0, -2),
    height = +d3.select('#grafico1').style('height').slice(0, -2)-25;

 d3.selectAll(".contenedorGrafico").append("div").attr("class","epigrafe")
            .html((d,i)=>{
                var cual = i?1:0;
                return "www.decodificar.org - "+epigrafeData[cual].fecha+" - Fuente: "+ epigrafeData[cual].fuente}
                );


    if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    }

    svg.attr("viewBox", [0, 0, width, height]);


    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;
    

var parseTime = d3.timeParse("%Y-%m-%d");

var x = d3.scaleTime().range([0, width]);
var y = d3.scaleLinear().range([height, 0]);
var yRight = d3.scaleLinear().range([height, 0]);
var yLog = d3.scaleLog().range([height, 0]);

var yLogRight = d3.scaleLog().range(yLog.range());


var yAxis = d3.axisRight(y)
    .ticks(8).tickFormat(d3.format(",d")).tickSizeInner(0)
;

var yAxisDer = d3.axisLeft(yRight)
    .ticks(8).tickFormat(d3.format(",d")).tickSizeInner(0)
;

var yLogAxis = d3.axisRight(yLog)
                .ticks(4).tickFormat(d3.format(",d")).tickSizeInner(0);

var yLogAxisDer = d3.axisLeft(yLogRight)
                .ticks(30).tickFormat(d3.format(",d")).tickSizeInner(0);




    var tituloGrafico = [". Casos confirmados y fallecimientos diarios",". Casos confirmados y fallecidos diarios"];
    
    var tituloEje = ["Casos confirmados diarios","Fallecimientos diarios"];

    var data =  files[0].map(obj => {
                return {
                                "iso":obj.iso_code,
                                "name":obj.location,
                                "casos":+obj.casos_diarios_prom,
                                "fallecidos":+obj.fallecimientos_diarios_prom,
                                "fecha":parseTime(obj.date)
                                }
            });


svg.append("g")
    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	;

	svg.each(function(d,i){
		d3.select(this).select("g").attr("id","gInterno"+i);
        d3.select(this).append("defs").append("svg:clipPath")
        .attr("id", "clip"+i)
        .append("svg:rect")
        .attr("width", width-40 )
        .attr("height", height )
        .attr("x", 25)
        .attr("y", 0);
	})

    


    dibujaGrafico(data.filter(d=>d.iso=="DEU"), "DEU", true, 1, 15,6000,260,["2020-02-29","2020-07-18"])
    dibujaGrafico(data.filter(d=>d.iso=="ESP"), "ESP", true, 2, 6,9000,1000,["2020-02-29","2020-05-19"])
    dibujaGrafico(data.filter(d=>d.iso=="ISR"), "ISR", true, 3, 11,2000,30,["2020-02-29","2020-07-28"])
    dibujaGrafico(data.filter(d=>d.iso=="AUS"), "AUS", true, 4, 11,1600,16,["2020-03-10","2020-08-12"])

    dibujaGrafico(data.filter(d=>d.iso=="ARG"), "ARG", false, 0, 12,3000,[2,100],["2020-03-10","2020-07-5"])



    function dibujaGrafico(datosPais, pais, finished, scrollyID, retraso, maxEjeIzq, maxEjeDer, rangoFechas){


        var grafico = d3.select("#gInterno"+scrollyID)
    ;

            grafico.append("text")
                .attr("class", "titulo")
                .attr("y", -30)
                .text(datosPais[0].name + (isMobile?tituloGrafico[1]:tituloGrafico[0]));
        console.log(isMobile?tituloGrafico[1]:tituloGrafico[0])
        yLog.domain([1, d3.max(datosPais, d=>d.casos)*1.1]);
        yLogRight.domain([2, 100]);
       
        line = d3.line()
        .defined(d => d.casos>0)

         .x(d => x(d.fecha));

        if(finished){ // para grafico terminado
            x.domain([parseTime(rangoFechas[0]),parseTime(rangoFechas[1])]);
    
            y.domain([0,maxEjeIzq]);

            var ejeY = grafico.append("g") // EJE Y
                .attr("id", "ejeY")
                .attr("class", "axis axis--y")
                .call(yAxis);

            yRight.domain([0,maxEjeDer]);

            var ejeYder = grafico.append("g") // EJE Y derecho
                .attr("id", "ejeYder")
                .attr("class", "axis axis--y")
                .attr("transform", "translate( " + width + ", 0 )")
                .call(yAxisDer);

        }else{ // para grafico de argentina

            x.domain([parseTime(rangoFechas[0]),parseTime(rangoFechas[1])]);
            y.domain([0,3000]);

            var ejeY = grafico.append("g") // EJE Y
                .attr("id", "ejeY")
                .attr("class", "axis axis--y")
                .call(yAxis);

            var ejeYder = grafico.append("g") // EJE Y derecho
                .attr("id", "ejeYder")
                .attr("class", "axis axis--y")
                .attr("transform", "translate( " + width + ", 0 )")
                .style("opacity",0)
                .call(yLogAxisDer);
        }

            ejeX = grafico.append("g") // EJE X
                .attr("class", "axis axis--x")
                .attr("transform", "translate(0," + (height+5) + ")")
                .call(d3.axisBottom(x)
                .ticks(d3.timeMonth.every(1)))
                .call(ajustaMesesEjeX)
                ;

            
            ejeY.append("text")
                .attr("class", "axis-title")
                .attr("y", -11)
                .text(tituloEje[0]);

            ejeYder.append("text")
                .attr("class", "axis-title der")
                .attr("y", -11)
                .text(tituloEje[1]);
            
            

        const lineasContainer = grafico.append("g")
                                       .attr("id","lineas"+ pais)
					            	  .attr("clip-path", "url(#clip"+scrollyID+")");


        var lineaCasos = lineasContainer
				.append("path")
                    .attr("class", "linea casos")
                    .style("stroke", "#00468B40")
                    .style("stroke-width", "1px")
                    .attr("d", line.y(d => y(d.casos))(datosPais));

        var lineaMuertes = lineasContainer
                .append("path")
                    .attr("class", "linea muertos")
                    .attr("opacity",finished?1:0)
                    .style("stroke", "#F26522")
                    .attr("d", finished?line.y(d => yRight(d.fallecidos))(datosPais):line.y(d => y(d.fallecidos))(datosPais));
        

         var lineaCasosDelayed = lineaCasos.clone()
                    .attr("class", "linea casos delayed")
                    .attr("data-retraso",x(d3.timeDay.offset(parseTime(rangoFechas[0]), retraso) ))
                    .style("stroke", "#00468B")
                    .style("stroke-width", "2px")

        if(pais=="ISR"||pais=="AUS"){
            var flechita = grafico.append("g")
                        .attr("transform","translate("+x(parseTime("2020-07-20"))+","+y(500)+") scale(0.08) rotate(135)");

                flechita.append("path").attr("id","flechita")
                        .attr("d", flechitaPath)
                        .style("fill","#f28e2c")
                        ;

                if(pais=="AUS") flechita.attr("transform","translate("+x(parseTime("2020-07-30"))+","+y(800)+") scale(0.08) rotate(135)")
        }
        
        
    }

    
    init(stepSel1,1)
	init(stepSel2,2)
    init(stepSel3,3)
	init(stepSel4,4)
    init(stepSel5,5)


function scrollyTelling(containerNumber,step,entra){


	if(containerNumber == 1){  //GRAFICO PRIMER SCROLLY ARG
        datosPais = data.filter(d=>d.iso=="ARG");
        y.domain([0,3000]);
        x.domain([parseTime("2020-03-10"),parseTime("2020-07-5")]);
        line.x(d => x(d.fecha));
        switch (step) {
            case 0: // INICIO, ES LINEAL
                d3.select("#gInterno0").selectAll(".muertos").transition().duration(600).style("opacity", 0);
            break;

            case 1: // aparece muertes
                d3.select("#gInterno0").selectAll(".muertos").transition().duration(600).style("opacity", 1);
                break;

            case 2: 

            break;

            case 3: // VUELVE A lineal
            y.domain([0,3000]);
            d3.select("#gInterno0").select("#ejeY").transition().duration(600).call(yAxis);
            d3.select("#gInterno0").selectAll(".casos")
                    .transition().duration(600)
                    .attr("d", line.y(d => y(d.casos))(datosPais));

            d3.select("#gInterno0").selectAll(".muertos")
                    .transition().duration(600)
                    .attr("d", line.y(d => y(d.fallecidos))(datosPais));
            break;

            case 4: 
            yLog.domain([1, d3.max(datosPais, d=>d.casos)*1.1]);
            line.defined(d => d.casos>0)
            d3.select("#gInterno0").select("#ejeY").transition().duration(600).call(yLogAxis);
            d3.select("#gInterno0").select("#ejeYder").transition().duration(600).style("opacity",0).call(yLogAxisDer);
                d3.select("#gInterno0").selectAll(".casos")
                    .transition().duration(600)
                    .attr("d", line.y(d => yLog(d.casos))(datosPais));

            line.defined(d => d.fallecidos>0)
                d3.select("#gInterno0").selectAll(".muertos")
                    .transition().duration(600)
                    .attr("d", line.y(d => yLog(d.fallecidos))(datosPais));

            break;

            case 5: 
            yLog.domain([10, 10000]);
            yLogRight.domain([2, 100]);
            line.defined(d => d.casos>0)
            d3.select("#gInterno0").select("#ejeY").transition().duration(600).call(yLogAxis.ticks(3));
            d3.select("#gInterno0").select("#ejeYder").transition().duration(600).style("opacity",1).call(yLogAxisDer);
            d3.select("#gInterno0").selectAll(".casos")
                    .transition().duration(600)
                    .attr("d", line.y(d => yLog(d.casos))(datosPais));

            line.defined(d => d.fallecidos>0)
                d3.select("#gInterno0").selectAll(".muertos")
                    .transition().duration(600)
                    .attr("d", line.y(d => yLogRight(d.fallecidos))(datosPais));

            break;

            case 6: 
             d3.select("#grafico"+containerNumber)
                    .selectAll(".delayed").transition().duration(600)
                    .attr("transform", "translate(0,0)")
                ;
            break;

            case 7: 
            var retraso = d3.select("#grafico"+containerNumber).select(".delayed").attr("data-retraso");
                d3.select("#grafico"+containerNumber)
                    .selectAll(".delayed").transition().duration(600)
                    .attr("transform", "translate(" + (entra?retraso:0) + ",0)")
                ;
            break;



        }

      
  
	}else{
        switch (step) {
            case 0: // inicia el traslado de la curva de casos con el retraso
                var retraso = d3.select("#grafico"+containerNumber).select(".delayed").attr("data-retraso");
                d3.select("#grafico"+containerNumber)
                    .selectAll(".delayed").transition().duration(600)
                    .attr("transform", "translate(" + (entra?retraso:0) + ",0)");
            break;

        }
        

            /// aca maneja los otros scrollys
    }
          

}


function ajustaMesesEjeX(g) {
        var diasUltimoMes = d3.timeDay.count(d3.timeMonth.floor(x.domain()[1]),x.domain()[1]);
        var diasPrimerMes = Math.abs(d3.timeDay.count(d3.timeMonth.ceil(x.domain()[0]),x.domain()[0]));
		  // ESTO PONE LOS NOMBRES DE LOS MESES EN MEDIO DE CADA MES
           g.selectAll(".tick:not(:last-of-type):not(:last-of-type) text") // para todos los meses menos el ultimo
                .attr("dx", x(d3.timeDay.offset(x.domain()[0], 15 ))) // mueve el equivalente a 15 dias
                .attr("dy", "0.3em") ;

          if(diasPrimerMes>8){
            g.selectAll(".tick:first-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .clone(true)
                .text(d3.timeFormat("%B")(d3.timeMonth.floor(x.domain()[0])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasPrimerMes/2))*-1)
                .attr("dy", "0.3em") ;
            }

  
            if(diasUltimoMes<8){
                g.selectAll(".tick:last-of-type text").remove()
            }else{
            g.selectAll(".tick:last-of-type text") // el ultimo si no esta completo lo centra en los dias que haya
                .text(d3.timeFormat("%b")(d3.timeMonth.floor(x.domain()[1])))
                .attr("dx",  x(d3.timeDay.offset(x.domain()[0], diasUltimoMes/2 )))
                .attr("dy", "0.3em") ;
            }

            g.selectAll(".tick line") // las lineas que separan los meses, mas altas
                .attr("y2", "1.4em") ;
			}


});

</script>



<div class="note info"><p>El retraso entre el número de fallecimientos y el número de casos confirmados se debe principalmente al curso natural de la enfermedad (aunque otras causas como retrasos en la carga de datos también pueden tener efecto).</p>
<p>Mientras más se tarde en testear a las personas con síntomas, y mientras más se tarde en conocer el resultado de ese test, menor será el retraso entre la curva de casos y la de fallecimientos. Las dos curvas estarán más “cerca”.</p>
<p>La curva del número de fallecimientos es un indicador más confiable que la del número de casos confirmados, porque no depende de decisiones como la definición de caso sospechoso y el número de testeos que se están realizando. Sin embargo, tiene sus propias limitaciones y la principal es que es un indicador que llega con más retraso que el de casos confirmados.</p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿Cuándo tendremos una vacuna segura y efectiva?</title>
    <url>/covid/donde_esta_la_vacuna/</url>
    <content><![CDATA[


<style>

    .nada{
        fill:#4e79a7;
        fill:#f28e2c;
        fill:#e15759;
        fill:#76b7b2;
        fill:#59a14f;
        fill:#af7aa1;
        fill:#ff9da7;
        fill:#9c755f;
        fill:#8a7e78;

    }

    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }

    
    text.titulo {
            font-size: 12px;
            fill: #444;
        }


    #ejeY,#ejeY  .tick text{
        fill:#00468B;

    }
    #ejeYder, #ejeYder .tick text{
        fill:#F26522;
    }

    .axis-title {
        font-size: 11px;
        text-anchor: start;
    }
    
    .axis-title.der{
        text-anchor: end;
    }

    .linea {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 2px;
    }


    .label.naranja{
        background: #F26522;

    }

    .label.azul{
        background: #00468B;
        color:white;

    }

    .label.rebrote{
        background: #f28e2c;
        

    }

    #tracker text.numero {
        font-size: 19px;
        fill: #231f20;
        text-anchor: middle;
        font-variant-numeric: lining-nums;
    }
    
    #tracker text.titulo {
        font-size: 10px;
        font-weight: 700;
        fill: #231f20;
        text-anchor: middle;
        font-family: oswald;
    }
    

    div#stage0.stage{
        margin-top: 19%;
        }
    div#stage4.stage{
        margin-top: 15%;
        }


         div#stage0.stage img , div#stage1.stage img,  div#stage4.stage img  {
            width: 48%;
            display: inline-grid;
        }

        div#stage1.stage img{
            width: 65%;
            display: inline-grid;
            margin: auto;
        }

        div#stage4.stage img  {
            width: 80%;
            display: inline-grid;
        }

        div.stage {
            align-items: center;
            position: absolute;
            opacity: 0;
            width: 100%;
        }


        ul {
            display: flex;
            flex-wrap: wrap;
            list-style: none;
            padding: 0;
            margin: 0;
            justify-content: space-evenly;
            }

li {
    
    flex-grow: 0;
}

#stage3 li {
    height: 7vh;
    flex-grow: 0;
}

#stage2 li {
    width: 29%;
    flex-grow: 0;
}



.stage li img {
  max-height: 100%;
  object-fit: cover;
  vertical-align: bottom;
  margin: 0;

}

li.refe span {
    font-size: 12px;
}

.stage li.refe img {
    max-height: 87%;
    margin-bottom: -8px !important;
}

.table-container{
    align-items: center;
    position: absolute;
    bottom: 28px;
    width: 100%;
}

#rangos{
    font-size: 10px;
    text-align: center;
    padding: 0px;
    opacity: 0;
    max-width: 440px;
    margin: auto;
}



#rangos tr{
    background:transparent;
}


#rangos th, #rangos td {
    border: 1px solid #ddd;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 2px 1px;
    
}
#rangos td {
    border-left: none;
    width: 30%;
}


#rangos td:not(:last-child) {
    border-right: 1px dashed #ddd;
}

#rangos th {
    border-right: 1px solid #ddd;
    font-weight: 700;
    min-width: 70px;
}




    @media only screen and (min-width: 768px) {
  
        div#stage2.stage {
            margin-top: 5%;
        }

        #stage2  li {
            width: 16%;
        }

        #stage3  li {
            height: 6vh;
        }

        div#stage4.stage {
            margin-top: 3%;
        }
        
        div#stage0.stage{
        margin-top: 6%;
        }

        div#stage1.stage{
        margin-top: 5%;
        }
        div#stage0.stage img{
            width: 29%;
            display: inline-grid;
        }

        div#stage1.stage li{
            width: 48%;
            display: inline-grid;
            margin: auto;
        }

        

        div#stage4.stage img{
            width: 50%;
            display: inline-grid;
            max-height: 340px
        }


        #rangos td {
                min-width: 95px;
            }

            #rangos th {
                min-width: 100px;
            }



        #tracker{
            max-width: 440px;
            margin-top: 20px;
        }

        text.titulo {
            font-size: 14px;
            fill: #444;
        }
    }
    
</style>



<section id='scrolly1'>
    <div class='scrolly'>


        <!-- aca va el grafico que va a quedar fijo -->
        <figure id="grafico1" class='sticky contenedorGrafico' >
        

            <svg xmlns="http://www.w3.org/2000/svg" id="tracker" viewBox="0 -21 278.41 75">
                <g>
                  <g id="fase4" class="gfase">
                    <path d="M273.43,53.12H184V0h89.47a5,5,0,0,1,5,5V48.14A5,5,0,0,1,273.43,53.12Z" />
                    <g class="innerG">
                        <text transform="translate(250,18)" class="titulo">FASE IV</text>
                        <text transform="translate(250,40)" class="numero">0</text>
                    </g>
                  </g>
                  <g id="fase3" class="gfase">
                    <path d="M212.52,53.12H129.35V0h83A5,5,0,0,1,217,3.15l9.24,23.44a4.94,4.94,0,0,1-.11,3.9l-9,19.73A5,5,0,0,1,212.52,53.12Z" />
                    <g class="innerG">
                        <text transform="translate(195,18)" class="titulo">FASE III</text>
                        <text transform="translate(195,40)" class="numero">3</text>
                    </g>
                  </g>
                  <g id="fase2" class="gfase">
                    <path d="M161.09,53.12H78.9V0h82a5,5,0,0,1,4.63,3.15l9.24,23.44a5,5,0,0,1-.1,3.9l-9,19.73A5,5,0,0,1,161.09,53.12Z" />
                    <g class="innerG">
                        <text transform="translate(145,18)" class="titulo">FASE II</text>
                        <text transform="translate(145,40)" class="numero">10</text>
                    </g>
                  </g>
                  <g id="fase1" class="gfase">
                    <path d="M109.66,53.12H27.22V0h82.25a5,5,0,0,1,4.63,3.15l9.24,23.44a5,5,0,0,1-.1,3.9l-9,19.73A5,5,0,0,1,109.66,53.12Z" />
                    <g class="innerG">
                        <text transform="translate(95,18)" class="titulo">FASE I</text>
                        <text transform="translate(95,40)" class="numero">13</text>
                    </g>
                  </g>
                  <g id="fase0" class="gfase">
                    <path d="M58.23,53.12H5a5,5,0,0,1-5-5V5A5,5,0,0,1,5,0H58a5,5,0,0,1,4.63,3.15l9.25,23.44a5,5,0,0,1-.11,3.9L62.76,50.22A5,5,0,0,1,58.23,53.12Z" />
                    <g class="innerG">
                      <text transform="translate(33,18)" class="titulo">PRE CLINICA</text>
                      <text transform="translate(33,40)" class="numero">145</text>
                    </g>
                  </g>
                </g>
                <g transform="translate(60,-20)" id="aprobada" style="opacity: 0;">
                    <path d="M.61,13.29V5.16A4.55,4.55,0,0,1,5.16.61H143.62a4.55,4.55,0,0,1,4.23,2.88l5.66,14.35H5.16A4.55,4.55,0,0,1,.61,13.29Z" fill="#e05759" stroke="#e05759" stroke-miterlimit="10" stroke-width="1.23"/>
                    <line x1="166.1" y1="49.9" x2="150.06" y2="9.23" fill="none" stroke="#e05759" stroke-miterlimit="10" stroke-width="1.23"/>
                    <circle cx="166.1" cy="49.9" r="4.04" fill="#e05759" stroke="#e05759" stroke-miterlimit="10"/>
                    <text transform="translate(6.06 13.37)" font-size="9" fill="#231f20" font-family="Oswald-Bold, Oswald" font-weight="700">VACUNAS APROBADAS: <tspan id="numeroAprobadas">0</tspan></text>
                  </g>
              </svg>
            
              <div id="stage0" class="stage">
                <img src="/images/vacunas/petri.svg">
                <img src="/images/vacunas/microscopio.svg">
                <img src="/images/vacunas/raton.svg">
            </div>
            <div id="stage1" class="stage">
            <ul>
              <li style="color:#459892"><img src="/images/vacunas/personita.svg">
               <br>Dosis A</li>
              <li style="color:#4f79a7"><img src="/images/vacunas/personitaB.svg">
               <br>Dosis B</li>
            </ul>
            </div>
            <div id="stage2" class="stage"><ul>
              <li><img src="/images/vacunas/minivac.svg"></li>
            </ul>

            </div>
            <div id="stage3" class="stage">
                <ul>
               <li><img src="/images/vacunas/minivac.svg"></li>
             </ul>
            </div>
            <div id="stage4" class="stage">
              <img src="/images/vacunas/vacuna.svg">
            </div>
             
            <div class="table-container">
                <table id="rangos">
                    <tr>
                        <th>Edades:</th>
                        <td class="rango02">Niños</td>
                        <td class="rango01">Jóvenes</td>
                        <td class="rango02">Adultos Mayores</td>
                    </tr>
                    <tr>
                        <th>Personas:</th>
                        <td class="rango10">Decenas</td>
                        <td class="rango11">Centenas</td>
                        <td class="rango12">Miles</td>
                    </tr>
                </table>
            </div>

        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>
                    El proceso para obtener una vacuna segura y efectiva es complejo y puede llevar muchísimos años. 
                    <br/><br/>
                    Ese proceso tiene varias fases e involucra varios experimentos.
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    ¿Y qué es una vacuna? Es una preparación que genera anticuerpos contra un determinado agente infeccioso aumentando así la inmunidad frente a ese germen.
                    <br/><br/>
                    Las más comunes se fabrican en forma de inyección aunque también existen algunas orales o nasales.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    El proceso para obtener vacunas seguras y efectivas fue cambiando enormemente en el tiempo.
                    <br/><br/>
                    En la actualidad, las etapas de ese proceso son denominadas "fases", deben cumplirse en un orden establecido y recién cuando los experimentos fueron exitosos en una fase se puede pasar a la siguiente  (sin saltear ninguna).
                    <br/><br/>
                    Analicemos cada fase…

                </p>
            </div>
            
            <div class='step' data-index='3'>
                <p>
                    Así denominada porque no implica la experimentación en seres humanos. Se testea la vacuna candidata en células y luego en animales (ratones, monos) para evaluar si produce respuesta inmune y si es peligrosa para la salud.
                    <br/><br/>
                    Al ir avanzando por cada fase, hay mayores niveles de regulación y supervisión de la vacuna candidata.
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    Luego vienen las Fases Clínicas: 1, 2 y 3  (donde comienza la experimentación en seres humanos).
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    Estudios de seguridad.
                    <br/><br/>  
                    Se testea la vacuna candidata en un número muy pequeño de personas sanas y en distintas dosis para probar la seguridad y cuál es la dosis más segura. Además se confirma que estimula el sistema inmunológico humano.
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Estudios de seguridad ampliada.
                    <br/><br/>  
                    Estos estudios toman la dosis más efectiva y segura según la Fase 1 y la testean ahora en  cientos de personas de diversas edades.
                    <br/><br/>                      
                    Se evalúa, pero ahora de manera ampliada,  la seguridad y la capacidad de la vacuna para estimular el sistema inmunológico.
                </p>
            </div>
            <div class='step' data-index='7'>
                <p>
                    Una vez pasada la Fase 2, ya se sabe que la vacuna candidata es segura y estimula el sistema inmune. Pero eso no indica necesariamente que alcance para protegernos de una enfermedad, para eso se pasa a la Fase 3.
                </p>
            </div>
            <div class='step' data-index='8'>
                <p>
                    En casos excepcionales, se combinan las fases 1 y 2 y se hacen pruebas directamente en cientos de personas. Esto se hace como una forma de acortar tiempos del proceso.
                    <br/><br/>                      
                    En el caso de COVID-19, actualmente hay <b><span id="etapa1y2">10</span> vacunas candidatas</b> que se encuentran en fase 1/2.
                </p>
            </div>


            <div class='step' data-index='9'>
                <p>
                    <b>Estudios de eficacia </b>
                    <br/><br/>
                    En esta fase se administra la vacuna candidata a miles de personas  y también se administra un  “placebo” a otras miles de personas más.
                    <br/><br/>
                    Un placebo, en este caso, es algo que parece una vacuna y se aplica igual, pero en realidad no estimula el sistema inmune.
                    <br/><br/>
                    Tanto participantes como médicos son “ciegos” al tratamiento, es decir, no saben quién recibió la vacuna y quién el placebo.
                </p>
            </div>
            <div class='step' data-index='10'>
                <p>
                    Finalmente se hace un seguimiento para ver cuántos (vacunados o placebos) se infectan. En este punto recién podemos saber con qué nivel de eficacia la vacuna candidata nos protege del virus. 
                    <br/><br/>
                    También ahora podemos saber si hay efectos secundarios menos frecuentes que quizás en las fases anteriores no pudieron observarse.
                </p>
            </div>

            <div class='step' data-index='11'>
                <p>
                    Recién cuando la sustancia pasó satisfactoriamente por todas estas fases se llega a la instancia final, la de aprobación.
                    <br/><br/>
                    Los entes reguladores de cada país analizan los estudios realizados y deciden si aprueban la vacuna o no.
                    <br/><br/>
                    Existen vacunas para COVID-19 aprobadas por algunos países para su uso en ese territorio
                </p>
            </div>

            <div class='step' data-index='12'>
                <p>
                    Atravesar satisfactoriamente todas estas fases requiere de un gran esfuerzo (científico, tecnológico, económico y político) y por eso es un largo proceso que, en promedio, demora entre 10 y 15 años.
                </p>
            </div>

            <div class='step' data-index='13'>
                <p>
                    Luego de la aprobación empieza la producción a gran escala de miles de millones de dosis. En esta fase la vacuna comienza a utilizarse y los científicos continúan monitoreando su efectividad y su seguridad.
                </p>
            </div>

        </article>
    </div>
</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/V1_vacunas.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {

    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="V1");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });
       

    // **** CODIGO DEL SCROLLY *******


    const container1 = d3.select('#scrolly1'); //busco el container total
	
    const stepSel1 = container1.selectAll('.step'); // selecciono los "steps"
	
    function updateChart(index, what,containerNumber,entra) {  // funcion que llama cada vez que cruza un umbral
        const sel = d3.select('#scrolly'+containerNumber).select(`[data-index='${index}']`);
        what.classed('is-active', (d, i) => i === index);
        scrollyTelling(containerNumber,index,entra); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init(what,containerNumber) { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: what.nodes(),
            offset: 0.1,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index,what,containerNumber,1);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index,what,containerNumber,0);
            }
        });
    }
  

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
//****** DATOS


var skewer = d3.scaleOrdinal()
            .domain([0,1,2,3,4,5])
            .range([
                [0,0,0,0,0],
                [0,1,2,3,0],
                [0,1,2,-1,0],
                [0,1,-2,-1,0],
                [0,-3,-2,-1,0],
                [0,1,2,1,0]
            ]);

var colorFase = d3.scaleOrdinal()
            .domain(["fase0","fase1","fase2","fase3","fase4"])
            .range([
            ["hsl(24, 5%, 82%)","hsl(24, 0%, 92%)"],
            ["hsl(31, 95%, 77%)","hsl(31, 0%, 87%)"],
            ["hsl(30, 91%, 67%)","hsl(30, 0%, 77%)"],
            ["hsl(30, 89%, 55%)","hsl(30, 0%, 65%)"],
            ["hsl(112, 53%, 57%)","hsl(112, 0%, 67%)"]
            ]);
            
            
 

var vacunas = files[0];

    vacunas = vacunas.map(d=>{
        return {
                "titulo": d.fase,
                "cantidad":+d.cantidad
        }
        
    });
    


//*******



var ejeY, ejeX, tituloY, minDate, maxDate, line, posTracker, posTrackerPrev;

var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

//svg = d3.selectAll(".contenedorGrafico").append("svg"),
var 
    margin = isMobile ? {top: 35, right: 20, bottom: 35, left: 20} : {top: 35, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#grafico1').style('width').slice(0, -2),
    height = +d3.select('#grafico1').style('height').slice(0, -2)-25;

d3.select(".contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);

   
    var trackerHeight = d3.select("#tracker").node().getBoundingClientRect().height;

    var verticalAligner = d3.scaleOrdinal()
            .domain(["bottom","middle","top"])
            .range([height-trackerHeight-20,height/2-trackerHeight/2,0]);
            

    d3.select("#etapa1y2").html(vacunas[2].cantidad);
    d3.select("#vacunasAprobadas").html(vacunas[5].cantidad);

    // REEMPLAZAR LOS NUMEROS
    d3.selectAll(".gfase").each(function(d){
        
                var fase = this.id;
                switch(fase){
                    case "fase0":
                    d3.select(this).select(".numero").html(vacunas[0].cantidad);
                    break;

                    case "fase1":
                    d3.select(this).select(".numero").html(vacunas[1].cantidad);
                    break;

                    case "fase2":
                    d3.select(this).select(".numero").html(vacunas[3].cantidad);
                    break;

                    case "fase3":
                    d3.select(this).select(".numero").html(vacunas[4].cantidad);
                    break;

                    case "fase4":
                    d3.select(this).select(".numero").html(vacunas[6].cantidad);
                    break;
                }
        }
        );
    
    
    d3.select("#tracker").style("margin-top",verticalAligner("middle")+"px")  

    d3.select("#tracker").selectAll(".gfase").style("fill",function(d){
        return colorFase(this.id)[0]
    })  
    
    var li = d3.select("#stage2").select("li")
    for (let i = 0; i < 10; i++) {
        li.clone(true)
    }

    li = d3.select("#stage3").select("li");
    var refPlacebo = li.clone(true).classed("refe",true);
    var refVacuna = li.clone(true).classed("refe",true);;

    refPlacebo.select("img").attr("src","/images/vacunas/minivacPlaceboLabel.svg");
    refVacuna.select("img").attr("src","/images/vacunas/minivacLabel.svg");
    refPlacebo.append("span").html("Placebo");
    refVacuna.append("span").html("Vacuna");
    
    for (let i = 0; i < 50; i++) {
        li.clone(true).select("img").attr("src",Math.random()>0.4?"/images/vacunas/minivac.svg":"/images/vacunas/minivacPlacebo.svg")
    }
    

    
    init(stepSel1,1)

function scrollyTelling(containerNumber,step,entra){
    var porcentaje = 90, etapa,cambia,stage=-1,rangos, aprobada = 0;
        switch (step) {
            case 0: // tracker
                    etapa = -1;
                    cambia = 1;
                    posTracker = "middle";
                    rangos = 0;
            break;
            case 1: // vacuna
                    etapa = 4;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage4";
                    rangos = 0;
            break;

            case 2: // tracker
                    etapa = -1;
                    cambia = 1;
                    posTracker = "top";
                    rangos = 0;
            break;

      

            case 3: // fase pre clinica
                    etapa = 0;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage0";
                    rangos = 0;
            break;

            case 4: // Fases Clínicas: 1, 2 y 3
                    etapa = -1;
                    cambia = 1;
                    posTracker = "top";
                    rangos = 0;
            break;

            case 5: // fase 1
                    etapa = 1;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage1";
                    rangos = [1,0];
            break;

            case 6: //fase 2
            case 7:
                    etapa = 2;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage2";
                    rangos = [2,1];
            break;

            case 8: //fase 1 y 2 combinadas
                    etapa = 5;
                    cambia = 1;
                    posTracker = "middle";
                    rangos = 0;
            break;

            case 9: // fase 3
            case 10:
                    etapa = 3;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage3";
                    rangos = [2,2];
                    aprobada = 0;
                    d3.select("#aprobada").transition().duration(300).style("opacity",0);
            break;

            case 11: // Aprobacion
                    // aca tiene que prender el APROBACION
            case 12:
                    d3.select("#aprobada").transition().delay(300).duration(600).style("opacity",1);
            
                    aprobada = 1;
                    etapa = -1;
                    cambia = 1;
                    posTracker = "middle";
                    rangos = 0;
            break;

            case 13:
                    d3.select("#aprobada").transition().duration(300).style("opacity",0);
                    aprobada = 0;   
                    etapa = 4;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage4";
                    rangos = 0;
            break;

            case 14:
                    aprobada = 0;   
                    etapa = 4;
                    cambia = 1;
                    posTracker = "top";
                    stage = "stage4";
                    rangos = 0;
            break;
            
            

        }
        var stepper = 10,
            result,
            transparenciaTextos = 0.1;
            posChange=0;
        
        if(cambia) {
            if(posTracker != posTrackerPrev) posChange = 1;
            posTrackerPrev = posTracker;
            d3.select("#tracker").selectAll(".gfase")
                        .transition().duration(600) //.delay(400*posChange)
                        .style("fill",function(d){
                            var quien = this.id.slice(-1);
                            if(etapa==5) return colorFase(this.id)[quien==1?0:quien==2?0:1]
                            return colorFase(this.id)[etapa>=0?etapa==quien?0:1:0]
                        })  
                        .attr("transform", (d,i)=>{
                            return "translate("+(skewer(etapa)[i]*stepper)+",0)"}
                            )
                            .selectAll(".innerG")
                                .attr("transform", function(d){
                                    var quien = d3.select(this)._groups[0][0].parentNode.id.slice(-1)
                                    var result = etapa?etapa==quien?-2*stepper:0:0;
                                   return "translate("+result+",0)";
                                })
                                .selectAll("text")
                                .style("opacity", function(d){
                                    var quien = d3.select(this)._groups[0][0].parentNode.parentNode.id.slice(-1)
                                    if(etapa==-1) return 1; // esto es el tracker sin nada
                                    if(etapa==5) return quien==1?1:quien==2?1:transparenciaTextos; // esto es el tracker sin nada
                                   return etapa==quien?1:transparenciaTextos;
                                });                

            if(posChange){
                d3.select("#tracker")
                                .transition().duration(300)
                                .style("margin-top",verticalAligner(posTracker)+"px")

                    } 

        };

        if (rangos){
            d3.select("#rangos").transition().duration(600).style("opacity",1)
                                .selectAll("td")
                                .style("background-color", function(d,i){
                                    /* console.log(d3.select(this).attr("class").slice(-2),[0,rangos[0]].join(""),[1,rangos[0]].join(""))
                                    var quien = d3.select(this).attr("class").slice(-2);
                                    var rangoCompara = [[0,rangos[0]].join(""),[1,rangos[0]].join("")]
                                    if(quien == rangoCompara[0] || quien == rangoCompara[1]) return "silver";
                                    return "transparent"; */
                                    switch (etapa) {
                                        case 1:
                                            if(i==1 || i == 3 )
                                            return "silver";
                                            break;
                                        case 2:
                                            if(i<3 || i == 4 )
                                            return "silver";
                                            break;
                                        case 3:
                                            if(i<3 || i == 5 )
                                            return "silver";
                                            break;
                                        default:
                                            return "transparent";
                                            break;
                                    }
                                    
                                })

        }else{
            d3.select("#rangos").transition().duration(600).style("opacity",0)
            .selectAll("td").style("background-color","transparent");
        }

        // esto prende y apaga las stages
        d3.selectAll(".stage").transition().duration(400).style("opacity", function(d){
                                    var quien = this.id;
                                    if(stage==quien) return 1; // esto es el tracker sin nada
                                   return 0;
                                });  
        
        
        //if(aprobada) d3.select("#tracker").transition().duration(300).delay(400).attr("viewBox",d=>(aprobada?"0 -21 278.41 75":"0 0 278.41 53.12"))  


}


function titleCase(string) {
      var sentence = string.toLowerCase().split(" ");
      for(var i = 0; i< sentence.length; i++){
         if(sentence[i].length>2)sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);
      }
   return sentence.join(" ");
   }



}); // fin todo

</script>


<p>Dado que no hay población ni economía dispuesta a pasar 10 años con medidas de distanciamiento social, durante una pandemia es indispensable acelerar el proceso de aprobación de una vacuna. En estos casos los entes reguladores pueden dar una “autorización de uso de emergencia” antes de obtener una aprobación formal. </p>
<p>Otra forma de acelerar el proceso es combinar las fases entre sí. Esto implica, por ejemplo, probar la vacuna por primera vez en cientos de personas (en vez de probarla en pocas personas), lo que nos da una Fase mixta 1-2. Esto no siempre es factible, o solo es aceptable en tiempos de pandemia.</p>
<div class="note info"><p>Como vimos, generar una vacuna que sea segura para su uso en humanos y efectiva para prevenir enfermedades lleva mucho tiempo, recursos y pasos en todo el proceso. Durante la pandemia por COVID-19, la comunidad científica trabaja de manera muy intensa en obtener una vacuna lo antes posible. </p>
<p>En ese proceso se mezclan también intereses económicos y políticos que no podemos desconocer. Los esfuerzos de los países para asegurar una rápida fabricación y provisión de una vacuna a la humanidad son la gran apuesta para los próximos meses. </p>
</div>]]></content>
  </entry>
  <entry>
    <title>¿Cómo se compara COVID-19 con otras enfermedades contagiosas?</title>
    <url>/covid/como_se_compara/</url>
    <content><![CDATA[


<style>

    .nada{
        fill:#4e79a7;
        fill:#f28e2c;
        fill:#e15759;
        fill:#76b7b2;
        fill:#59a14f;
        fill:#af7aa1;
        fill:#ff9da7;
        fill:#9c755f;
        fill:#8a7e78;

    }

    .axis path, .axis line {
      fill: none;
      stroke: #D4D8DA;
      stroke-width: 1px;
     
    }

    .axis--y .domain, .axis--x .domain{
        display: none;
    }
    
    
    .axis--y .tick{
        stroke-width: 1px;
        stroke-dasharray: 3px 2px;
    }

    .axis--x .tick line{
        stroke-width: 2px;
    }

    
    text.titulo {
            font-size: 12px;
            fill: #444;
        }


    #ejeY,#ejeY  .tick text{
        fill:#00468B;

    }
    #ejeYder, #ejeYder .tick text{
        fill:#F26522;
    }

    .axis-title {
        font-size: 11px;
        text-anchor: start;
    }
    
    .axis-title.der{
        text-anchor: end;
    }

    .linea {
      fill: none;
      stroke: #a3a3a3;
      stroke-width: 2px;
    }


    .label.naranja{
        background: #F26522;

    }

    .label.azul{
        background: #00468B;
        color:white;

    }

    .label.amarillo{
        background: #f28e2c;
        

    }


    svg{
      width: 100%;
      height: 93%;
      margin: auto;
      margin-top: 2vh;
    }
    svg rect.fondo{
        fill:#ffffff90;
    }

    svg text.textoComun, svg text.textoCovid{
        font-size: 11px;
        fill:#444;
        font-variant-numeric:lining-nums;

    }

    
    svg text.textoCovid{
        font-weight: 700;
        fill:#F26522;
    }

    svg line{
        stroke:#888 ;
        stroke-width: 3px;
    }

    svg .circulitos{
        fill:#888 ;
    }


    #letalidadDesktop line.lineaComun{
        marker-start: url(#circulo0);
        marker-end: url(#circulo0)
    } 
    
    #letalidadDesktop line.lineaCovid{
        marker-start: url(#circuloCovid0);
        marker-end: url(#circuloCovid0)
    } 
    

 
    #letalidadMobile line.lineaComun{
        marker-start: url(#circulo1);
        marker-end: url(#circulo1)
    } 
    
    #letalidadMobile line.lineaCovid{
        marker-start: url(#circuloCovid1);
        marker-end: url(#circuloCovid1)
    } 
    
    #letalidadDesktop #mers.resaltado line.lineaComun{
        marker-start: url(#circuloCovid0);
        marker-end: url(#circuloCovid0)
    } 
    #letalidadMobile #mers.resaltado line.lineaComun{
        marker-start: url(#circuloCovid1);
        marker-end: url(#circuloCovid1)
    } 

    svg line.lineaCovid{
        stroke:#F26522 ;
        stroke-width: 4px;
    }

    svg #mers.resaltado line.lineaComun{
        stroke:#F26522 ;
    }


    svg #mers.resaltado text.textoComun{
        fill:#F26522 ;
        
    }


    svg .circulitosCovid{
        fill:#F26522 ;
    }
 

    svg g.eje line, svg g.eje polyline, svg g.eje path{
        fill:none;
        stroke-width: 1px;
        stroke: #888;
    }
    svg g.eje text{
        fill:#888;
        font-size: 10px;
        font-variant-numeric:lining-nums;
        transition: fill 0.5s, stroke 0.5s, stroke-width 0.5s;
    }

    svg g.eje text.titulo{
        fill:#444;
        font-size: 11px;
        
    }
    svg g.eje g.resaltado text, svg g.eje text.resaltado{
        stroke:#f28e2c;
        stroke-width: 10px;
        stroke-linejoin: round;
        font-weight: 900;
        fill: white;
        paint-order: stroke;
        transition: fill 0.5s, stroke 0.5s, stroke-width 0.5s;
    }

 

    svg g.referencia text,svg g.referencia rect{
      fill:#F26522;
    }

    svg g.referencia text{
      text-anchor: end;
      font-size: 11px;
      font-weight: 500;
    }

    
    #letalidadMobile{
        display:unset;
    }
    #letalidadDesktop{
        display:none;
    }
    
    @media (max-width: 567px){
        .post-block {
            margin-top: initial !important;
            padding: 8px 8px 8px !important;
        }
    }

    @media only screen and (min-width: 768px) {
      
          svg{
          margin-top: 1vh;
        }
            
        #letalidadMobile{
            display:none;
        }
        #letalidadDesktop{
            display:unset;
        }
        
        svg text.textoComun, svg text.textoCovid {
            font-size: 14px;
        }

      svg g.eje text.titulo {
          font-size: 13px;
      }

      svg g.eje text {
          font-size: 12px;
      }

        text.titulo {
            font-size: 14px;
            fill: #444;
        }
    }
    
</style>


<section id='scrolly1'>
    <div class='scrolly'>
        <!-- aca va el grafico que va a quedar fijo  width="278.11" height="564.61" -->
        <figure id="grafico1" class='sticky contenedorGrafico' >
          
            <svg id="letalidadDesktop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 770 565">
              <defs>
                  
                <filter id="glow0">
                  <fegaussianblur class="blur" result="coloredBlur" stddeviation="4"></fegaussianblur>
                  <femerge>
                    <femergenode in="coloredBlur"></femergenode>
                    <femergenode in="coloredBlur"></femergenode>
                    <femergenode in="coloredBlur"></femergenode>
                    <femergenode in="SourceGraphic"></femergenode>
                  </femerge>
                </filter>

                <marker id="circulo0" refX="2" stroke="none" refY="2" markerWidth="3" markerHeight="3">
                  <circle r="1" cx="2" cy="2" class="circulitos"></circle>
                </marker>
                <marker id="circuloCovid0" refX="2" stroke="none" refY="2" markerWidth="3" markerHeight="3">
                  <circle r="1" cx="2" cy="2" class="circulitosCovid"></circle>
                </marker>
                
              </defs>
                <rect class="fondo"  x="51.34" y="15.8" width="703.92" height="485.97"/>
                <g id="gripe" class="item">
                  <line class="lineaComun" x1="151.65" y1="501.27" x2="297.11" y2="501.27"/>
                  <text class="textoComun" transform="translate(303.9 505.62)">Gripe común</text>
                </g>
                <g id="influenza" class="item">
                  <line class="lineaComun" x1="211.64" y1="479.21" x2="382.39" y2="479.21"/>
                  <text class="textoComun" transform="translate(390.08 483.56)">Influenza de 1918</text>
                </g>
                <g id="covid" class="item">
                  <line class="lineaCovid" x1="284.04" y1="467.08" x2="346.01" y2="467.08"/>
                  <text class="textoCovid" transform="translate(283 460)">COVID-19</text>
                </g>
                <g id="sars" class="item">
                  <line class="lineaComun" x1="286.63" y1="413.04" x2="529.48" y2="413.04"/>
                  <text class="textoComun" transform="translate(392.55 408.04)">SARS</text>
                </g>
                <g id="tuberculosis" class="item">
                  <line class="lineaComun" x1="74.13" y1="362.31" x2="567.38" y2="362.31"/>
                  <text class="textoComun" transform="translate(259.93 357.31)">Tuberculosis</text>
                </g>
                <g id="gripea" class="item">
                  <line class="lineaComun" x1="49.35" y1="186.95" x2="97.42" y2="186.95"/>
                  <text class="textoComun" transform="translate(51.59 165.52)">Gripe A<tspan x="-0.62" y="14.4">(H7N9)</tspan></text>
                </g>
                <g id="mers" class="item">
                  <line class="lineaComun" x1="170.86" y1="183.64" x2="741.3" y2="183.64"/>
                  <text class="textoComun" transform="translate(438.44 178.64)">MERS</text>
                </g>
                <g id="ebola" class="item">
                  <line class="lineaComun" x1="223.72" y1="40.27" x2="623.4" y2="40.27"/>
                  <text class="textoComun" transform="translate(407 35.27)">Ébola</text>
                </g>
                <g id="ejex" class="eje item">
                  <text class="titulo" transform="translate(296.49 558.45)">Número de reproducción básico</text>
                  <path class="dominio" d="M51.34,523.77H743.28"/>
                  <g>
                    <line class="ticks" x1="164.78" y1="523.27" x2="164.78" y2="527.27"/>
                    <text class="textTicks" transform="translate(162.36 538.37)">1</text>
                  </g>
                  <g>
                    <line class="ticks" x1="51.34" y1="523.27" x2="51.34" y2="527.27"/>
                    <text class="textTicks" transform="translate(47.8 538.37)">0</text>
                  </g>
                  <g>
                    <line class="ticks" x1="286" y1="523.27" x2="286" y2="527.27"/>
                    <text class="textTicks" transform="translate(282.7 538.37)">2</text>
                  </g>
                  <g>
                    <line class="ticks" x1="407.21" y1="523.27" x2="407.21" y2="527.27"/>
                    <text class="textTicks" transform="translate(404.13 538.37)">3</text>
                  </g>
                  <g>
                    <line class="ticks" x1="528.42" y1="523.27" x2="528.42" y2="527.27"/>
                    <text class="textTicks" transform="translate(525.35 538.37)">4</text>
                  </g>
                  <g>
                    <line class="ticks" x1="649.63" y1="523.27" x2="649.63" y2="527.27"/>
                    <text class="textTicks" transform="translate(645.01 538.37)">5</text>
                  </g>
                </g>
                <g id="ejey" class="eje item">
                  <text class="titulo" transform="translate(10.41 27.8)"><tspan xml:space="preserve">Tasa de  Letalidad</tspan></text>
                  <g  class="ebolaTick">
                    <line class="ticks" x1="32.33" y1="40.77" x2="26.33" y2="40.77"/>
                    <text class="textoTicks" transform="translate(10.04 42.97)">50</text>
                  </g>
                  <g class="mersTick">
                    <line class="ticks" x1="32.33" y1="183.64" x2="26.33" y2="183.64"/>
                    <text class="textoTicks" transform="translate(10.4 185.84)">34</text>
                  </g>
                  <g>
                    <line class="ticks" x1="32.33" y1="364.24" x2="26.33" y2="364.24"/>
                    <text class="textoTicks" transform="translate(12.27 366.44)">15</text>
                  </g>
                  <g>
                    <line class="ticks" x1="32.33" y1="410.45" x2="26.33" y2="410.45"/>
                    <text class="textoTicks" transform="translate(11.73 412.65)">10</text>
                  </g>

                  <g>
                    <line class="ticks" x1="32.33" y1="467.08" x2="26.33" y2="467.08"/>
                    <text class="textoTicks" transform="translate(7.61 471.28)">3.8</text>
                  </g>
                  <g>
                    <polyline class="ticks" points="26.33 40.77 32.83 40.77 32.83 501.77 26.33 501.77"/>
                    <text class="textoTicks" transform="translate(16.57 503.97)">0</text>
                  </g>
                </g>
                <g class="referencia" transform="translate(730 557)">
                  <text >Sin tratamientos ni vacunas</text>
                  <rect x="3" y="-9" width="11" height="11"/>
                </g>
                
              </svg>


            <svg id="letalidadMobile" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 564" >
                
                <defs>
                      <filter id="glow1">
                        <fegaussianblur class="blur" result="coloredBlur" stddeviation="4"></fegaussianblur>
                        <femerge>
                          <femergenode in="coloredBlur"></femergenode>
                          <femergenode in="coloredBlur"></femergenode>
                          <femergenode in="coloredBlur"></femergenode>
                          <femergenode in="SourceGraphic"></femergenode>
                        </femerge>
                   </filter>
                   <marker id="circulo1" refX="2" stroke="none" refY="2" markerWidth="3" markerHeight="3">
                    <circle r="1" cx="2" cy="2" class="circulitos"></circle>
                  </marker>
                  <marker id="circuloCovid1" refX="2" stroke="none" refY="2" markerWidth="3" markerHeight="3">
                    <circle r="1" cx="2" cy="2" class="circulitosCovid"></circle>
                  </marker>
                </defs>
                <rect class="fondo" x="52.38" y="71.12" width="217.65" height="384.8"/>
                <g id="gripe" class="item">
                  <line class="lineaComun" x1="81.8" y1="455.52" x2="124.46" y2="455.52"/>
                  <text class="textoComun" transform="translate(140.91 458.96)">Gripe común</text>
                </g>
                <g id="influenza" class="item">
                  <line class="lineaComun" x1="99.4" y1="438.06" x2="149.47" y2="438.06"/>
                  <text class="textoComun" transform="translate(172.32 441.5)">Influenza de 1918</text>
                </g>
                <g id="covid" class="item">
                  <line class="lineaCovid" x1="120.63" y1="428.45" x2="138.8" y2="428.45"/>
                  <text class="textoCovid" transform="translate(107.73 422)">COVID-19</text>
                </g>
                <g id="sars" class="item">
                  <line class="lineaComun" x1="121.39" y1="385.66" x2="192.61" y2="385.66"/>
                  <text class="textoComun" transform="translate(144.72 381.7)">SARS</text>
                </g>
                <g id="tuberculosis" class="item">
                  <line class="lineaComun" x1="59.07" y1="345.49" x2="203.73" y2="345.49"/>
                  <text class="textoComun" transform="translate(94.53 341.53)">Tuberculosis</text>
                </g>
                <g id="gripea" class="item">
                  <line class="lineaComun" x1="51.8" y1="206.64" x2="65.9" y2="206.64"/>
                  <text class="textoComun" transform="translate(42.1 189.67)">Gripe A<tspan x="-0.49" y="11.4">(H7N9)</tspan></text>
                </g>
                <g id="mers" class="item">
                  <line class="lineaComun" x1="87.44" y1="204.02" x2="254.73" y2="204.02"/>
                  <text class="textoComun" transform="translate(157.12 200.06)">MERS</text>
                </g>
                <g id="ebola" class="item">
                  <line class="lineaComun" x1="102.94" y1="90.5" x2="220.16" y2="90.5"/>
                  <text class="textoComun" transform="translate(148.43 86.54)">Ébola</text>
                </g>
                <g id="ejex" class="eje item">
                  <text class="titulo"  transform="translate(63.57 512.6)">Número de reproducción básico</text>
                  <g>
                    <path class="dominio" d="M52.38,477.92H255.31"/>
                    <g>
                      <line class="ticks" x1="85.65" y1="477.42" x2="85.65" y2="481.42"/>
                      <text class="textTicks" transform="translate(83.23 492.52)">1</text>
                    </g>
                    <g>
                      <line class="ticks" x1="52.38" y1="477.42" x2="52.38" y2="481.42"/>
                      <text class="textTicks" transform="translate(48.85 492.52)">0</text>
                    </g>
                    <g>
                      <line class="ticks" x1="121.2" y1="477.42" x2="121.2" y2="481.42"/>
                      <text class="textTicks" transform="translate(117.91 492.52)">2</text>
                    </g>
                    <g>
                      <line class="ticks" x1="156.75" y1="477.42" x2="156.75" y2="481.42"/>
                      <text class="textTicks" transform="translate(153.67 492.52)">3</text>
                    </g>
                    <g>
                      <line class="ticks" x1="192.3" y1="477.42" x2="192.3" y2="481.42"/>
                      <text class="textTicks" transform="translate(188.9 492.52)">4</text>
                    </g>
                    <g>
                      <line class="ticks" x1="227.85" y1="477.42" x2="227.85" y2="481.42"/>
                      <text class="textTicks" transform="translate(224.19 492.52)">5</text>
                    </g>
                  </g>
                </g>
                <g id="ejey" class="eje item">
                  <text class="titulo" transform="translate(6.92 50.12)">Tasa de<tspan x="0" y="13.2">Letalidad</tspan></text>
                  <g class="ebolaTick">
                    <line class="ticks" x1="29.15" y1="90.89" x2="23.15" y2="90.89"/>
                    <text class="textTicks" transform="translate(9.7 92.64)">50</text>
                  </g>
                  <g class="mersTick">
                    <line class="ticks" x1="29.15" y1="204.02" x2="23.15" y2="204.02"/>
                    <text class="textTicks" transform="translate(9.99 205.76)">34</text>
                  </g>
                  <g>
                    <line class="ticks" x1="29.15" y1="347.02" x2="23.15" y2="347.02"/>
                    <text class="textTicks" transform="translate(11.47 348.76)">15</text>
                  </g>
                  <g>
                    <line class="ticks" x1="29.15" y1="383.61" x2="23.15" y2="383.61"/>
                    <text class="textTicks" transform="translate(11.04 385.35)">10</text>
                  </g>
                  <g>
                    <line class="ticks" x1="29.15" y1="428.45" x2="23.15" y2="428.45"/>
                    <text class="textTicks" transform="translate(7.77 431.78)">3.8</text>
                  </g>
                  <g>
                    <polyline class="ticks" points="23.15 90.89 29.65 90.89 29.65 455.92 23.15 455.92"/>
                    <text class="textTicks" transform="translate(14.87 457.66)">0</text>
                  </g>
                </g>
                <g class="referencia" transform="translate(290 540)">
                  <text >Sin tratamientos ni vacunas</text>
                  <rect x="3" y="-9" width="11" height="11"></rect>
                </g>
              </svg>
             
        </figure>

        <!-- acá van los textos de cada paso -->
        <article>
            <div class='step' data-index='0'>
                <p>En esta historia vamos a comparar la peligrosidad de COVID-19 con la de enfermedades conocidas producidas por otros virus y bacterias.
                </p>
            </div>
            
            <div class='step' data-index='1'>
                <p>
                    Para saber cuán “peligroso” es un virus, debemos conocer principalmente tres aspectos.
                    <br/><br/>
                    El primero es la <mark class="label amarillo">tasa de letalidad</mark>, que es la relación entre el número de personas que fallecen y el número total que contrajo la enfermedad. Un virus que contagia a miles y miles de personas pero produce muy pocas muertes es un virus con bajísima tasa de letalidad.
                </p>
            </div>
            <div class='step' data-index='2'>
                <p>
                    Acá vemos cómo el virus del Ébola tiene una tasa de letalidad extremadamente alta: de 100 personas que se contagian de <mark class="label amarillo">Ébola</mark>, 50 fallecen.
            </div>
            <div class='step' data-index='3'>
                <p>
                    El segundo aspecto importante a tener en cuenta es la facilidad con la que el virus se propaga o el <mark class="label amarillo">número de reproducción básica del virus</mark>, conocido también como R0 y que es una medida de su contagiosidad
                    <br/><br/>
                    Si un virus tiene un R0 = 3, estamos diciendo que, en promedio, por cada persona contagiada, ese virus se transmite a otras 3 personas más.
                </p>
            </div>
            <div class='step' data-index='4'>
                <p>
                    Tal como vemos acá, dos virus pueden tener la misma <mark class="label amarillo">tasa de letalidad (34%)</mark> y aún así tener diferentes contagiosidades. Este es el caso de la gripe aviar y el MERS (un tipo de coronavirus que se descubrió en Oriente Medio en 2012).
                    <br/><br/>
                    En la gripe aviar, por cada persona contagiada, el virus se transmite a menos de una persona en promedio. En cambio, el MERS es más contagioso, ya que por cada persona con el virus habrá, en promedio, hasta 5 nuevas personas infectadas.
                </p>
            </div>
            <div class='step' data-index='5'>
                <p>
                    El tercer aspecto a considerar para saber cuán peligroso es un germen es el hecho de que existan o no tratamientos efectivos o medidas preventivas (medicamentos, vacunas, etc).
                    <br/><br/>
                    Para algunos gérmenes hay algún tipo de tratamiento y/o una vacuna, mientras que para otros aún <mark class="label naranja">no existe tratamiento alguno ni vacunas</mark>.
                </p>
            </div>
            <div class='step' data-index='6'>
                <p>
                    Con toda esta información… ¿dónde ubicamos al virus de la COVID-19?
                </p>
            </div>
            <div class='step' data-index='7'>
                <p>
                    Como podemos ver, el virus que produce <mark class="label naranja">COVID-19</mark> parece tener una contagiosidad (R0 ) mayor que el virus de la gripe estacional, es decir que se propaga más fácilmente.
                    <br/><br/>
                    También vemos que tiene una letalidad más baja que otros virus que causaron brotes de otras enfermedades (como SARS, MERS o Ébola). Si 100 personas contraen COVID-19, 3 de ellas fallecerán. Sin embargo, es bastante más letal que la gripe estacional.
                </p>
            </div>
           
        </article>
    </div>
</section>


 <!-- Scripts -->
 <script>
    
//********************* CARGA DATOS ************

Promise.all([
    d3.csv("https://datos.decodificar.org/I6_letalidad_contagiosidad.csv"),
    d3.csv("https://datos.decodificar.org/metaData_tablas_nueva.csv")

]).then(function(files) {


    var epigrafeData = files[files.length-1].filter(d=>d.id_historia=="I6");
        epigrafeData.forEach(e => {
            e.fecha = d3.timeFormat("%-d/%b/%Y")(d3.timeParse("%Y-%m-%d")(e.fecha_actualizacion)).toLowerCase(); 
        });

        // **** CODIGO DEL SCROLLY *******


    const container1 = d3.select('#scrolly1'); //busco el container total

    const stepSel1 = container1.selectAll('.step'); // selecciono los "steps"

    function updateChart(index, what,containerNumber,entra) {  // funcion que llama cada vez que cruza un umbral
        const sel = d3.select('#scrolly'+containerNumber).select(`[data-index='${index}']`);
        what.classed('is-active', (d, i) => i === index);
        scrollyTelling(containerNumber,index,entra); // <<<<< AQUI LLAMA AL GRAFICO VERDADERO
    }

    function init(what,containerNumber) { // configuracion inicial
        Stickyfill.add(d3.select('.sticky').node()); // fallback para browsers sin sticky

        enterView({
            selector: what.nodes(),
            offset: 0,
            enter: el => {
                const index = +d3.select(el).attr('data-index');
                updateChart(index,what,containerNumber,1);
            },
            exit: el => {
                let index = +d3.select(el).attr('data-index');
                index = Math.max(0, index - 1);
                updateChart(index,what,containerNumber,0);
            }
        });
    }
  

    // **** END SCROLLY *******


/* COLORES
azul #00468B
violeta #8B6BAF
rojo #F04E53
naranja #F26522
verde #62BB46
*/
       
        
var ejeY, ejeX, tituloY, minDate, maxDate, line;


var altoMaximo = 1.3; // cuantas veces el ancho permitimos que sea el alto maximo

var flechitaPath = 'M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z';



var margin = isMobile ? {top: 55, right: 20, bottom: 35, left: 20} : {top: 70, right: 30, bottom: 25, left: 30},
    width =  +d3.select('#grafico1').style('width').slice(0, -2),
    height = +d3.select('#grafico1').style('height').slice(0, -2)-25;

d3.select(".contenedorGrafico").append("div").attr("class","epigrafe")
            .html("www.decodificar.org - "+epigrafeData[0].fecha+" - Fuente: "+ epigrafeData[0].fuente);
        


   /*  if (height > altoMaximo*width) {
        svg.style('margin-top', (height - altoMaximo*width)/2 + "px")
        height = altoMaximo*width;
    } */

    height = height - margin.top - margin.bottom;
    width = width - margin.left - margin.right;

    //svg.attr("viewBox", [0, 0, width, height]);
    var svg = d3.select("#grafico1").selectAll("svg");


var parseTime = d3.timeParse("%Y-%m-%d");

       
    init(stepSel1,1)

function scrollyTelling(containerNumber,step,entra){
  switch (step) {
    case 0:
      d3.selectAll("svg").selectAll(".item").transition().duration(600).style("opacity",1)
      d3.selectAll("svg").selectAll("#ejey").selectAll(".titulo").classed("resaltado",false)
      break;

      case 1:
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",function(d){
              var quien = this.id;
              if(quien=="ejey") return 1;
              return 0;
          });
          d3.selectAll("svg").selectAll(".ebolaTick").classed("resaltado",false)
          d3.selectAll("svg").selectAll(".referencia").transition().duration(600).style("opacity",0)
          d3.selectAll("svg").selectAll("#ejey").selectAll(".titulo").classed("resaltado",true)
      break;

      case 2: //muestra ebola y remarca el 50
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",function(d){
              var quien = this.id;
              if(quien=="ejey") return 1;
              if(quien=="ebola") return 1;
              return 0;
          });
          d3.selectAll("svg").selectAll("#ejey").selectAll(".titulo").classed("resaltado",false)
      d3.selectAll("svg").selectAll(".ebolaTick").classed("resaltado",true)
      d3.selectAll("svg").selectAll("#ejex").selectAll(".titulo").classed("resaltado",false)


      break;
  
      case 3:
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",function(d){
              var quien = this.id;
              if(quien=="ejex") return 1;
              return 0;
          });
          d3.selectAll("svg").selectAll(".ebolaTick").classed("resaltado",false)
          d3.selectAll("svg").selectAll("#ejex").selectAll(".titulo").classed("resaltado",true)
          d3.selectAll("svg").selectAll(".mersTick").classed("resaltado",false)

      break;

      case 4: //muestra mers y remarca el 34
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",function(d){
              var quien = this.id;
              if(quien=="ejex") return 1;
              if(quien=="ejey") return 1;
              if(quien=="gripea") return 1;
              if(quien=="mers") return 1;
              return 0;
          })

          d3.selectAll("svg").selectAll(".mersTick").classed("resaltado",true)
          d3.selectAll("svg").selectAll("#mers").classed("resaltado",false)
          d3.selectAll("svg").selectAll(".referencia").transition().duration(600).style("opacity",0)
          d3.selectAll("svg").selectAll("#ejex").selectAll(".titulo").classed("resaltado",false)


      break;

      case 5: // remarca el mers
      d3.selectAll("svg").selectAll(".mersTick").classed("resaltado",false)
      d3.selectAll("svg").selectAll("#mers").classed("resaltado",true)
      d3.selectAll("svg").selectAll(".referencia").transition().duration(600).style("opacity",1)

      case 6:
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",function(d){
              var quien = this.id;
              if(quien=="covid") return 0;
              return 1;
          })
      break;

      case 7:
      d3.selectAll("svg").selectAll(".item").transition().duration(600)
          .style("opacity",1)
      break;

  }

}




});

</script>



<div class="note info"><p>La realidad es difícilmente una cuestión de blanco o negro. Es más bien compleja y tiene muchos matices. Hay gérmenes que son más contagiosos pero menos letales, y gérmenes que son más letales pero menos contagiosos. Y además, independientemente de eso, para algunos tenemos vacunas y/o tratamientos y para otros no.</p>
<p>Si bien estas cualidades de los virus pueden variar con el paso del tiempo y dependen de factores externos (distintas regiones, grupos de edad, condiciones socioeconómicas, conocimiento que los científicos van adquiriendo, etc.), al comparar al virus de COVID-19 con otros gérmenes que conocemos mejor se hace más fácil entender cuál es el desafío y el grado de peligrosidad de la pandemia que enfrentamos.</p>
</div>]]></content>
  </entry>
</search>
